image: artifactory-horw.int.toradex.com/dockerhub-proxy-horw/docker:latest

variables:
  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest
  DEBIAN_TAG: "3"
  DOTNET_6_TAG: "6.0"
  DOTNET_6_VERSION: "6.0.16"
  # The latest version of vsdbg can be obtained by running the follow command: 
  #curl -sSL https://aka.ms/getvsdbgsh | /bin/sh /dev/stdin -v latest -l ~/vsdbg
  DEBUGGER_RELEASE: "17.6.10208.1"

services:
  - name: artifactory-horw.int.toradex.com/dockerhub-proxy-horw/docker:dind
    alias: docker

stages:
  - lint
  - repository-tagging
  - build
  - deploy
  - build-debug
  - deploy-debug
  - build-multiarch
  - deploy-multiarch
  - build-uno
  - deploy-uno
  - build-uno-debug
  - deploy-uno-debug
  - build-multiarch-uno
  - deploy-multiarch-uno

.docker-build:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - if test -n "${BASE_NAME}"; then docker pull ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} && docker tag ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} torizon/${BASE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG} ; fi || exit 1
    - docker info
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker build --build-arg IMAGE_ARCH=${IMAGE_ARCH}
      --build-arg BASE_NAME=${BASE_NAME}
      --build-arg BASE_NAME_DEBUG=${BASE_NAME_DEBUG}
      --build-arg BASE_TAG=${DEBIAN_TAG}-${DOTNET_TAG}
      --build-arg DOTNET_RUNTIME=${DOTNET_RUNTIME}
      --build-arg DOTNET_VERSION=${DOTNET_VERSION}
      --build-arg DOTNET_ARCHITECTURE=${DOTNET_ARCHITECTURE}
      --build-arg DEBUGGER_RELEASE=${DEBUGGER_RELEASE}
      --build-arg DEBUGGER_ARCH=${DEBUGGER_ARCH}
      --build-arg BASE_TAG_WAYLAND=${DEBIAN_TAG}
      --build-arg BASE_NAME_WAYLAND=${BASE_NAME_WAYLAND}
      --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      --cache-from ${CI_REGISTRY}/rd/torizon-core-containers/debian-docker-images/${IMAGE_NAME}:buster-latest
      ${DOCKER_NO_CACHE:+--no-cache}
      -f ${DOCKERFILE_FOLDER}/Dockerfile
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKERFILE_FOLDER}/
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}


docker-build-6-arm32:
  extends: .docker-build
  needs: []
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_NAME: arm32v7-dotnet
    DOTNET_VERSION: ${DOTNET_6_VERSION}
    DOTNET_RUNTIME: dotnet
    DOTNET_ARCHITECTURE: arm
    DOCKERFILE_FOLDER: base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build

docker-build-6-arm32-asp:
  extends: .docker-build
  needs: []
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_NAME: arm32v7-aspdotnet
    DOTNET_VERSION: ${DOTNET_6_VERSION}
    DOTNET_RUNTIME: aspnetcore
    DOTNET_ARCHITECTURE: arm
    DOCKERFILE_FOLDER: base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build

docker-build-6-arm64:
  extends: .docker-build
  needs: []
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-dotnet
    DOTNET_VERSION: ${DOTNET_6_VERSION}
    DOTNET_RUNTIME: dotnet
    DOTNET_ARCHITECTURE: arm64
    DOCKERFILE_FOLDER: base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build

docker-build-6-arm64-asp:
  extends: .docker-build
  needs: []
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-aspdotnet
    DOTNET_VERSION: ${DOTNET_6_VERSION}
    DOTNET_RUNTIME: aspnetcore
    DOTNET_ARCHITECTURE: arm64
    DOCKERFILE_FOLDER: base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build

docker-build-6-arm32-uno:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-dotnet
    BASE_NAME_WAYLAND: wayland-base
    IMAGE_NAME: arm32v7-dotnet-uno
    DOCKERFILE_FOLDER: uno-base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-uno

docker-build-6-arm64-uno:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-dotnet
    BASE_NAME_WAYLAND: wayland-base-vivante
    IMAGE_NAME: arm64v8-dotnet-uno
    DOCKERFILE_FOLDER: uno-base
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-uno

docker-build-6-debug-arm32:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-dotnet
    IMAGE_NAME: arm32v7-dotnet-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-debug

docker-build-6-debug-arm32-asp:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-aspdotnet
    IMAGE_NAME: arm32v7-aspdotnet-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-debug

docker-build-6-debug-arm64:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-dotnet
    IMAGE_NAME: arm64v8-dotnet-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-debug

docker-build-6-debug-arm64-asp:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-aspdotnet
    IMAGE_NAME: arm64v8-aspdotnet-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-debug

docker-build-6-debug-arm32-uno:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME_DEBUG: arm32v7-dotnet-debug
    BASE_NAME: arm32v7-dotnet-uno
    IMAGE_NAME: arm32v7-dotnet-uno-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: uno-debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-uno-debug

docker-build-6-debug-arm64-uno:
  extends: .docker-build
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME_DEBUG: arm64v8-dotnet-debug
    BASE_NAME: arm64v8-dotnet-uno
    IMAGE_NAME: arm64v8-dotnet-uno-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: uno-debug
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-uno-debug

lint_dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    # Some rules cannot be applied in our specific cases.
    # However, since we don't want to completely ignore these rules,
    # we are changing the following rules to have the level "info":
    #- DL3008 warning: Pin versions in apt get install. Instead of `apt-get install <package>` use `apt-get install <package>=<version>`
    #- DL3029 warning: Do not use --platform flag with FROM
    #- DL4006 warning: Set the SHELL option -o pipefail before RUN with a pipe in it. If you are using /bin/sh in an alpine image or if your shell is symlinked to busybox then consider explicitly setting your SHELL to /bin/ash, or disable this check
    - hadolint */Dockerfile --failure-threshold warning --info DL3008 --info DL3029 --info DL4006

# Make sure to create access token in "Settings/Access Tokens" section with "write_repository" scope selected.
# Then in "Settings/CI/CD/" section add a variable with key "GIT_TOKEN" and a value of the access token. Also mask the variable.
tag:
  stage: repository-tagging
  needs: []
  before_script:
    - if [ -z ${GIT_TOKEN} ]; then echo "Missing variable GIT_TOKEN." && exit 1; fi
    - TAGS="debian-dotnet-${DOTNET_3_VERSION}
            debian-dotnet-${DOTNET_5_VERSION}
            debian-dotnet-${DOTNET_6_VERSION}"
  script:
    - apk update && apk add git
    - git remote set-url origin https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}
    - for TAG in ${TAGS};
        do
          if git ls-remote --tags origin  | grep ${TAG} > /dev/null; then
            echo "${TAG} tag already exists.";
          else
            echo "Tagging repository with ${TAG} tag.";
            git tag --delete ${TAG} > /dev/null 2>&1 || true;
            git tag ${TAG};
            git push -o ci.skip origin ${TAG};
          fi
        done

  # Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
  - mkdir -p $HOME/.docker
  - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
  - docker version

.docker-build-multiarch:
  before_script:
    - *do_docker_experimental
    - rm -rf ~/.docker/manifests/*
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker manifest create ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm
    - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}  --os linux --arch arm64
    - docker manifest inspect -v ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
    - docker manifest push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}


docker-build-dotnet-6-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: dotnet
    IMAGE_NAME_32: arm32v7-dotnet
    IMAGE_NAME_64: arm64v8-dotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch

docker-build-aspnet-6-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: aspdotnet
    IMAGE_NAME_32: arm32v7-aspdotnet
    IMAGE_NAME_64: arm64v8-aspdotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch

docker-build-dotnet-6-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: dotnet-debug
    IMAGE_NAME_32: arm32v7-dotnet-debug
    IMAGE_NAME_64: arm64v8-dotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch

docker-build-aspnet-6-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: aspdotnet-debug
    IMAGE_NAME_32: arm32v7-aspdotnet-debug
    IMAGE_NAME_64: arm64v8-aspdotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch

docker-build-dotnet-uno-6-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: dotnet-uno
    IMAGE_NAME_32: arm32v7-dotnet-uno
    IMAGE_NAME_64: arm64v8-dotnet-uno
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch-uno

docker-build-dotnet-uno-6-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_NAME: dotnet-uno-debug
    IMAGE_NAME_32: arm32v7-dotnet-uno-debug
    IMAGE_NAME_64: arm64v8-dotnet-uno-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: build-multiarch-uno

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_TOKEN is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
  stage: deploy
  when: manual
  script:
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX}
    # Get creation date of this container. This make sure that we do not create
    # new date tags when pushing the same container again.
    - export TIMESTAMP=$(docker inspect -f '{{ .Created }}' ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX})
    - export DATE_TAG=$(date '+%Y%m%d' -d ${TIMESTAMP} -D '%Y-%m-%dT%H:%M:%S')
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DATE_TAG}-${DOTNET_TAG}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_VERSION}
    - docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}-${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DATE_TAG}-${DOTNET_VERSION}
    - docker push --all-tags ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}


docker-deploy-6-arm32:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-dotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy

docker-deploy-6-arm64:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-dotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy

docker-deploy-6-arm32-asp:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-aspdotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy

docker-deploy-6-arm64-asp:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-aspdotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy

docker-deploy-6-debug-arm32:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-dotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-debug

docker-deploy-6-debug-arm64:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-dotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-debug

docker-deploy-6-debug-arm32-asp:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-aspdotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-debug

docker-deploy-6-debug-arm64-asp:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-aspdotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-debug

docker-deploy-6-arm32-uno:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-dotnet-uno
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-uno

docker-deploy-6-arm64-uno:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-dotnet-uno
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-uno

docker-deploy-6-debug-arm32-uno:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm32v7-dotnet-uno-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-uno-debug

docker-deploy-6-debug-arm64-uno:
  extends: .docker-deploy
  variables:
    IMAGE_NAME: arm64v8-dotnet-uno-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
    DOTNET_VERSION: ${DOTNET_6_VERSION}
  stage: deploy-uno-debug


.docker-deploy-multiarch:
  before_script:
    - *do_docker_experimental
    - rm -rf ~/.docker/manifests/*
  script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
    - docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${DEBIAN_TAG}-${DOTNET_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${DEBIAN_TAG}-${DOTNET_TAG}
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${DEBIAN_TAG}-${DOTNET_TAG}  --os linux --arch arm
    - docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${DEBIAN_TAG}-${DOTNET_TAG}  --os linux --arch arm64
    - docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}
    - docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${DEBIAN_TAG}-${DOTNET_TAG}
  stage: deploy-multiarch
  when: manual


docker-deploy-dotnet-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet
    IMAGE_NAME_32: arm32v7-dotnet
    IMAGE_NAME_64: arm64v8-dotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch

docker-deploy-aspnet-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: aspdotnet
    IMAGE_NAME_32: arm32v7-aspdotnet
    IMAGE_NAME_64: arm64v8-aspdotnet
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch

docker-deploy-dotnet-debug-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-debug
    IMAGE_NAME_32: arm32v7-dotnet-debug
    IMAGE_NAME_64: arm64v8-dotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch

docker-deploy-aspnet-debug-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: aspdotnet-debug
    IMAGE_NAME_32: arm32v7-aspdotnet-debug
    IMAGE_NAME_64: arm64v8-aspdotnet-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch

docker-deploy-dotnet-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet
    IMAGE_NAME_32: arm32v7-dotnet
    IMAGE_NAME_64: arm64v8-dotnet
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch

docker-deploy-aspnet-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: aspdotnet
    IMAGE_NAME_32: arm32v7-aspdotnet
    IMAGE_NAME_64: arm64v8-aspdotnet
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch

docker-deploy-dotnet-debug-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-debug
    IMAGE_NAME_32: arm32v7-dotnet-debug
    IMAGE_NAME_64: arm64v8-dotnet-debug
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch

docker-deploy-aspnet-debug-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: aspdotnet-debug
    IMAGE_NAME_32: arm32v7-aspdotnet-debug
    IMAGE_NAME_64: arm64v8-aspdotnet-debug
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch

docker-deploy-dotnet-uno-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-uno
    IMAGE_NAME_32: arm32v7-dotnet-uno
    IMAGE_NAME_64: arm64v8-dotnet-uno
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch-uno

docker-deploy-dotnet-uno-debug-6.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-uno-debug
    IMAGE_NAME_32: arm32v7-dotnet-uno-debug
    IMAGE_NAME_64: arm64v8-dotnet-uno-debug
    DOTNET_TAG: ${DOTNET_6_TAG}
  stage: deploy-multiarch-uno

docker-deploy-dotnet-uno-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-uno
    IMAGE_NAME_32: arm32v7-dotnet-uno
    IMAGE_NAME_64: arm64v8-dotnet-uno
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch-uno

docker-deploy-dotnet-uno-debug-6-version.multiarch:
  extends: .docker-deploy-multiarch
  variables:
    IMAGE_NAME: dotnet-uno-debug
    IMAGE_NAME_32: arm32v7-dotnet-uno-debug
    IMAGE_NAME_64: arm64v8-dotnet-uno-debug
    DOTNET_TAG: ${DOTNET_6_VERSION}
  stage: deploy-multiarch-uno