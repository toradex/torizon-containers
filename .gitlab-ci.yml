image: docker:latest

variables:
  DEBIAN_RELEASE: "bookworm"
  DEBIAN_BASE_IMAGE: "bookworm-slim"
  TORADEX_INTERNAL_DOCKERHUB_CACHE: "artifactory-horw.int.toradex.com/dockerhub-proxy-horw"

  # When running a deploy job, push the container even if the tag already exists.
  # Can be overriden by setting "DEPLOY_CONDITIONALLY" to anything other than "true" when starting a new job manually.
  DEPLOY_CONDITIONALLY: "true"

  # Container versions, used as final tags for the image.

  DEBIAN_MAJOR: "3"
  DEBIAN_MINOR: "0"
  DEBIAN_PATCH: "8"

  WAYLAND_BASE_MAJOR: "3"
  WAYLAND_BASE_MINOR: "0"
  WAYLAND_BASE_PATCH: "8"

  WESTON_MAJOR: "3"
  WESTON_MINOR: "0"
  WESTON_PATCH: "11"

  QT5_WAYLAND_MAJOR: "3"
  QT5_WAYLAND_MINOR: "0"
  QT5_WAYLAND_PATCH: "11"

  QT5_WAYLAND_EXAMPLES_MAJOR: "3"
  QT5_WAYLAND_EXAMPLES_MINOR: "0"
  QT5_WAYLAND_EXAMPLES_PATCH: "11"

  WAYLAND_BASE_VIVANTE_MAJOR: "3"
  WAYLAND_BASE_VIVANTE_MINOR: "0"
  WAYLAND_BASE_VIVANTE_PATCH: "9"

  WESTON_VIVANTE_MAJOR: "3"
  WESTON_VIVANTE_MINOR: "0"
  WESTON_VIVANTE_PATCH: "12"

  QT5_WAYLAND_VIVANTE_MAJOR: "3"
  QT5_WAYLAND_VIVANTE_MINOR: "0"
  QT5_WAYLAND_VIVANTE_PATCH: "12"

  QT5_WAYLAND_EXAMPLES_VIVANTE_MAJOR: "3"
  QT5_WAYLAND_EXAMPLES_VIVANTE_MINOR: "0"
  QT5_WAYLAND_EXAMPLES_VIVANTE_PATCH: "12"

  WESTON_TOUCH_CALIBRATOR_MAJOR: "3"
  WESTON_TOUCH_CALIBRATOR_MINOR: "0"
  WESTON_TOUCH_CALIBRATOR_PATCH: "9"

  GRAPHICS_TESTS_MAJOR: "3"
  GRAPHICS_TESTS_MINOR: "0"
  GRAPHICS_TESTS_PATCH: "9"

  GRAPHICS_TESTS_VIVANTE_MAJOR: "3"
  GRAPHICS_TESTS_VIVANTE_MINOR: "0"
  GRAPHICS_TESTS_VIVANTE_PATCH: "10"

  ## debian-cross-toolchains

  DEBIAN_CROSS_TOOLCHAINS_MAJOR: "3"
  DEBIAN_CROSS_TOOLCHAINS_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_PATCH: "8"

  DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR: "3"
  DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH: "6"

  ## debian-dotnet-development-images

  DOTNET_RELEASE: "6.0"
  DOTNET_SEMANTIC_VERSION: "6.0.16"
  # The latest version of vsdbg can be obtained by running the follow command:
  #curl -sSL https://aka.ms/getvsdbgsh | /bin/sh /dev/stdin -v latest -l ~/vsdbg
  DOTNET_DEBUGGER_RELEASE: "17.6.10208.1"

  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

  ## rt-validation

  RT_TESTS_MAJOR: "3"
  RT_TESTS_MINOR: "0"
  RT_TESTS_PATCH: "5"

  STRESS_TESTS_MAJOR: "3"
  STRESS_TESTS_MINOR: "0"
  STRESS_TESTS_PATCH: "5"

# extract the folder names as variables so we can easily change/introduce
# jobs and as to not replicate the folder names in `changes:` tags as well

  DEBIAN_DOCKER_IMAGES_FOLDER: "debian-docker-images"
  DEBIAN_CROSS_TOOLCHAINS_FOLDER: "debian-cross-toolchains"
  DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER: "debian-dotnet-development-images"
  SSH_FOLDER: "ssh"
  BASE_FOLDER: "base"
  BASE_VIVANTE_FOLDER: "base-vivante"
  WAYLAND_BASE_FOLDER: "wayland-base"
  WAYLAND_BASE_VIVANTE_FOLDER: "wayland-base-vivante"
  WESTON_FOLDER: "weston"
  GRAPHICS_TESTS_FOLDER: "graphics-tests"
  GRAPHICS_TESTS_VIVANTE_FOLDER: "graphics-tests-vivante"
  WESTON_TOUCH_CALIBRATOR_FOLDER: "weston-touch-calibrator"
  QT5_WAYLAND_FOLDER: "qt5-wayland"
  QT5_WAYLAND_EXAMPLES_FOLDER: "qt5-wayland-examples"
  DEBUG_FOLDER: "debug"
  UNO_BASE_FOLDER: "uno-base"
  UNO_DEBUG_FOLDER: "uno-debug"
  DEBIAN_PACKAGE_DEVEL_FOLDER: "debian-package-devel"
  RT_VALIDATION_FOLDER: "rt-validation"
  RT_TESTS_FOLDER: "rt-tests"
  STRESS_TESTS_FOLDER: "stress-tests"

services:
  - name: docker:dind

.do_print_environment_variables: &do_print_environment_variables
  - echo "GitLab CI/CD environment variables:"
  - env

# images have dependencies between them with the `needs` keyword so we
# have faster builds and the nice graph showing the relation between
# containers that gitlab plots in the ci/cd runs view. So these stages
# are nothing more than a way to visually arrange jobs. They are *not*
# used to order jobs.
stages:
  - lint
  - repository tagging
  - chores before building
  - build-base
  - build-base-multiarch
  - build-stage1
  - build-stage1-multiarch
  - build-stage2
  - build-stage2-multiarch
  - build-stage3
  - build-stage3-multiarch
  - build-stage4
  - build-stage4-multiarch
  - build-samples-bridge
  - deploy
  - deploy-multiarch

pull-tag-and-push-debian-image:
  stage: chores before building
  script:
  - *do_print_environment_variables
  # Pull, retag and push debian:bookworm-slim or bullseye-slim or sid-slim to cache it in ${CI_REGISTRY_IMAGE} 
  # for docker-build-dotnet-debug*, which needs to pull from two different registers (dockerhub and gitlab).
  # This way we can re-use the "DOCKER_REGISTRY" build-arg, otherwise we need another one.
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - export ARCHITECTURES="arm arm64"

  - for ARCH in ${ARCHITECTURES};
      do
        docker pull --platform linux/${ARCH} ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/debian:${DEBIAN_BASE_IMAGE};
        docker tag ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/debian:${DEBIAN_BASE_IMAGE} ${CI_REGISTRY_IMAGE}/debian-${ARCH}:${DEBIAN_BASE_IMAGE};
        docker push ${CI_REGISTRY_IMAGE}/debian-${ARCH}:${DEBIAN_BASE_IMAGE};
      done

  - docker manifest create ${CI_REGISTRY_IMAGE}/debian:${DEBIAN_BASE_IMAGE} ${CI_REGISTRY_IMAGE}/debian-arm:${DEBIAN_BASE_IMAGE} ${CI_REGISTRY_IMAGE}/debian-arm64:${DEBIAN_BASE_IMAGE};
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/debian:${DEBIAN_BASE_IMAGE} ${CI_REGISTRY_IMAGE}/debian-arm:${DEBIAN_BASE_IMAGE} --os linux --arch arm --variant v7;
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/debian:${DEBIAN_BASE_IMAGE} ${CI_REGISTRY_IMAGE}/debian-arm64:${DEBIAN_BASE_IMAGE} --os linux --arch arm --variant v8;
  - docker manifest inspect -v ${CI_REGISTRY_IMAGE}/debian:${DEBIAN_BASE_IMAGE};
  - docker manifest push ${CI_REGISTRY_IMAGE}/debian:${DEBIAN_BASE_IMAGE};

# Docker image builds
#
# Build the Docker images specificd in project/$DOCKERFILE_FOLDER/ and push
# it to Gitlab's internal Docker registry
.docker-build:
  variables:
    IMAGE_ARCH: linux/arm
    ADD_TORADEX_REPOSITORY: 1
  script:
  - *do_print_environment_variables
  - export IMAGE_TAG="${MAJOR}${RELEASE_APPEND}"
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker info
  - export DATE=$(date +%Y%m%d)
  # Ignore error "sh: write error: File exists" when installing qemu-user-static
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes || true
  - docker build --build-arg IMAGE_ARCH=${IMAGE_ARCH}
                  --build-arg DOCKER_REGISTRY=${DOCKER_REGISTRY:-${CI_REGISTRY_IMAGE}}
                  --build-arg BASE_NAME=${BASE_NAME}
                  --build-arg IMAGE_TAG=${DOCKER_BASE_TAG}
                  --build-arg ADD_TORADEX_REPOSITORY=${ADD_TORADEX_REPOSITORY}
                  --build-arg ACCEPT_FSL_EULA=${ACCEPT_FSL_EULA}
                  --build-arg QT5_EXAMPLES_DEBIAN=${QT5_EXAMPLES_DEBIAN}
                  --build-arg TORADEX_SNAPSHOT=${TORADEX_SNAPSHOT:-20230602T160948Z}
                  --build-arg BASE_NAME_DEBUG=${BASE_NAME_DEBUG}
                  --build-arg DOTNET_BASE_IMAGE_TAG=${DEBIAN_MAJOR}
                  --build-arg DEBIAN_BASE_IMAGE_TAG=${DEBIAN_BASE_IMAGE}
                  --build-arg DOTNET_RUNTIME=${DOTNET_RUNTIME}
                  --build-arg DOTNET_VERSION=${DOTNET_VERSION}
                  --build-arg DOTNET_ARCHITECTURE=${DOTNET_ARCHITECTURE}
                  --build-arg DOTNET_DEBUGGER_RELEASE=${DOTNET_DEBUGGER_RELEASE}
                  --build-arg DEBUGGER_ARCH=${DEBUGGER_ARCH}
                  --build-arg BASE_TAG_WAYLAND=${DEBIAN_MAJOR}
                  --build-arg BASE_NAME_WAYLAND=${BASE_NAME_WAYLAND}
                  --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
                  ${DOCKER_NO_CACHE:+--no-cache}
                  --label container.name=${IMAGE_NAME}
                  --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE}
                  --label git.branch=${CI_COMMIT_BRANCH}
                  --label git.hash=${CI_COMMIT_SHA}
                  --label pipeline.id=${CI_PIPELINE_ID}
                  -f ${DOCKERFILE_FOLDER}Dockerfile
                  -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
                  ${DOCKERFILE_FOLDER}
  - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}

## debian-docker-images

docker-build-base:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm/v7
    IMAGE_NAME: arm32v7-debian
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-wayland-base:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    BASE_NAME: arm32v7-debian
    IMAGE_NAME: arm32v7-debian-wayland-base
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WAYLAND_BASE_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base"]

docker-build-weston:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_MAJOR}"
    - export MAJOR="${WESTON_MAJOR}"
    - export MINOR="${WESTON_MINOR}"
    - export PATCH="${WESTON_PATCH}"
    - ./${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_FOLDER}/make_feature_map.sh
  variables:
    BASE_NAME: arm32v7-debian-wayland-base
    IMAGE_NAME: weston
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-graphics-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${GRAPHICS_TESTS_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_PATCH}"
  variables:
    BASE_NAME: arm32v7-debian-wayland-base
    IMAGE_NAME: graphics-tests
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${GRAPHICS_TESTS_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-weston-touch-calibrator:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_MAJOR}"
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
  variables:
    BASE_NAME: weston
    IMAGE_NAME: arm32v7-debian-weston-touch-calibrator
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_TOUCH_CALIBRATOR_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-weston"]

docker-build-qt5-wayland:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    BASE_NAME: arm32v7-debian-wayland-base
    IMAGE_NAME: arm32v7-debian-qt5-wayland
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-qt5-wayland-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    BASE_NAME: arm32v7-debian-qt5-wayland
    IMAGE_NAME: arm32v7-debian-qt5-wayland-examples
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_EXAMPLES_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland"]

docker-build-base-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64/v8
    IMAGE_NAME: arm64v8-debian
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-wayland-base-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-debian
    IMAGE_NAME: arm64v8-debian-wayland-base
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WAYLAND_BASE_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base-arm64v8"]

docker-build-wayland-base-vivante:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_VIVANTE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_VIVANTE_MINOR}"
    - export PATCH="${WAYLAND_BASE_VIVANTE_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-debian
    IMAGE_NAME: wayland-base-vivante
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WAYLAND_BASE_VIVANTE_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base-arm64v8"]

docker-build-weston-vivante:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_VIVANTE_MAJOR}"
    - export MAJOR="${WESTON_VIVANTE_MAJOR}"
    - export MINOR="${WESTON_VIVANTE_MINOR}"
    - export PATCH="${WESTON_VIVANTE_PATCH}"
    - ./${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_FOLDER}/make_feature_map.sh
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: wayland-base-vivante
    IMAGE_NAME: weston-vivante
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-vivante"]

docker-build-graphics-tests-vivante:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_VIVANTE_MAJOR}"
    - export MAJOR="${GRAPHICS_TESTS_VIVANTE_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_VIVANTE_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_VIVANTE_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: wayland-base-vivante
    IMAGE_NAME: graphics-tests-vivante
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${GRAPHICS_TESTS_VIVANTE_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-vivante"]

docker-build-weston-touch-calibrator-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_VIVANTE_MAJOR}"
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: weston-vivante
    IMAGE_NAME: arm64v8-debian-weston-touch-calibrator
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${WESTON_TOUCH_CALIBRATOR_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-weston-vivante"]

docker-build-qt5-wayland-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-debian-wayland-base
    IMAGE_NAME: arm64v8-debian-qt5-wayland
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-arm64v8"]

docker-build-qt5-wayland-examples-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-debian-qt5-wayland
    IMAGE_NAME: arm64v8-debian-qt5-wayland-examples
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_EXAMPLES_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland-arm64v8"]

docker-build-qt5-wayland-vivante:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_VIVANTE_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_VIVANTE_MAJOR}"
    - export MINOR="${QT5_WAYLAND_VIVANTE_MINOR}"
    - export PATCH="${QT5_WAYLAND_VIVANTE_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: wayland-base-vivante
    IMAGE_NAME: qt5-wayland-vivante
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-vivante"]

docker-build-qt5-wayland-vivante-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_VIVANTE_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_VIVANTE_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_VIVANTE_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_VIVANTE_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: qt5-wayland-vivante
    IMAGE_NAME: qt5-wayland-examples-vivante
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${QT5_WAYLAND_EXAMPLES_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland-vivante"]

## ${DEBIAN_CROSS_TOOLCHAINS_FOLDER}

docker-build-armhf-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-armhf
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: []
  
docker-build-arm-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-arm
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: []

docker-build-armhf-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    IMAGE_ARCH: armhf
    BASE_NAME: debian-cross-toolchain-armhf
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-armhf-toolchain"]

docker-build-arm64-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: []

docker-build-arm64-toolchain-vivante:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64-vivante
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_VIVANTE_FOLDER}/"
    ACCEPT_FSL_EULA: 1
  stage: build-base
  needs: []

docker-build-arm64-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    IMAGE_ARCH: arm64
    BASE_NAME: debian-cross-toolchain-arm64
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
  stage: build-stage1
  needs: [docker-build-arm64-toolchain]

docker-build-x86-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: amd64
    CROSS_COMPILE_ARG: x86_64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-amd64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
    USE_TORADEX_SNAPSHOT: 0
  stage: build-base
  needs: []

docker-build-x86-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    IMAGE_ARCH: amd64
    BASE_NAME: debian-cross-toolchain-amd64
    IMAGE_NAME: debian-cross-toolchain-ssh-amd64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
    USE_TORADEX_SNAPSHOT: 0
  stage: build-stage1
  needs: ["docker-build-x86-toolchain"]

docker-build-rcv-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_ARCH: riscv64
    CROSS_COMPILE_ARG: riscv64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-riscv64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
    USE_TORADEX_SNAPSHOT: 0
    DEBIAN_BASE_IMAGE: "sid-slim"
  stage: build-base
  needs: []

docker-build-rcv-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    IMAGE_ARCH: riscv64
    BASE_NAME: debian-cross-toolchain-riscv64
    IMAGE_NAME: debian-cross-toolchain-ssh-riscv64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
    USE_TORADEX_SNAPSHOT: 0
    DEBIAN_BASE_IMAGE: "sid-slim"
  stage: build-stage1
  needs: ["docker-build-rcv-toolchain"]

## debian-dotnet-development-images

docker-build-dotnet-arm32:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_NAME: arm32v7-dotnet
    DOTNET_RUNTIME: dotnet
    DOTNET_ARCHITECTURE: arm
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: []

docker-build-dotnet-arm32-asp:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_NAME: arm32v7-aspdotnet
    DOTNET_RUNTIME: aspnetcore
    DOTNET_ARCHITECTURE: arm
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: []

docker-build-dotnet-arm64:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-dotnet
    DOTNET_RUNTIME: dotnet
    DOTNET_ARCHITECTURE: arm64
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: []

docker-build-dotnet-arm64-asp:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-aspdotnet
    DOTNET_RUNTIME: aspnetcore
    DOTNET_ARCHITECTURE: arm64
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: []

docker-build-dotnet-arm32-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export BASE_TAG_WAYLAND="${DEBIAN_MAJOR}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-dotnet
    BASE_NAME_WAYLAND: wayland-base
    IMAGE_NAME: arm32v7-dotnet-uno
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_BASE_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm32", "docker-build-wayland-base-multiarch"]

docker-build-dotnet-arm64-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export BASE_TAG_WAYLAND="${DEBIAN_MAJOR}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-dotnet
    BASE_NAME_WAYLAND: wayland-base-vivante
    IMAGE_NAME: arm64v8-dotnet-uno
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_BASE_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm64", "docker-build-wayland-base-vivante"]

docker-build-dotnet-debug-arm32:
  retry: 2
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-dotnet
    IMAGE_NAME: arm32v7-dotnet-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm32"]

docker-build-dotnet-debug-arm32-asp:
  retry: 2
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME: arm32v7-aspdotnet
    IMAGE_NAME: arm32v7-aspdotnet-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm32-asp"]

docker-build-dotnet-debug-arm64:
  retry: 2
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-dotnet
    IMAGE_NAME: arm64v8-dotnet-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm64"]

docker-build-dotnet-debug-arm64-asp:
  retry: 2
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME: arm64v8-aspdotnet
    IMAGE_NAME: arm64v8-aspdotnet-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-arm64-asp"]

docker-build-dotnet-debug-arm32-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm
    BASE_NAME_DEBUG: arm32v7-dotnet-debug
    BASE_NAME: arm32v7-dotnet-uno
    IMAGE_NAME: arm32v7-dotnet-uno-debug
    DEBUGGER_ARCH: linux-arm
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_DEBUG_FOLDER}/"
  stage: build-stage4
  needs: ["docker-build-dotnet-arm32-uno"]

docker-build-dotnet-debug-arm64-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export RELEASE_APPEND="-${DOTNET_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    IMAGE_ARCH: linux/arm64
    BASE_NAME_DEBUG: arm64v8-dotnet-debug
    BASE_NAME: arm64v8-dotnet-uno
    IMAGE_NAME: arm64v8-dotnet-uno-debug
    DEBUGGER_ARCH: linux-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_DEBUG_FOLDER}/"
  stage: build-stage4
  needs: ["docker-build-dotnet-arm64-uno"]

## debian-package-devel

docker-build-debian-package-devel-arm64v8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_PACKAGE_DEVEL_MAJOR}"
    - export MINOR="${DEBIAN_PACKAGE_DEVEL_MINOR}"
    - export PATCH="${DEBIAN_PACKAGE_DEVEL_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-debian-package-devel
    DOCKERFILE_FOLDER: "${DEBIAN_PACKAGE_DEVEL_FOLDER}/"
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-debian-package-devel-arm32v7:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_REGISTRY="${TORADEX_INTERNAL_DOCKERHUB_CACHE}"
    - export RELEASE_APPEND="${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_PACKAGE_DEVEL_MAJOR}"
    - export MINOR="${DEBIAN_PACKAGE_DEVEL_MINOR}"
    - export PATCH="${DEBIAN_PACKAGE_DEVEL_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm
    IMAGE_NAME: arm32v7-${DEBIAN_PACKAGE_DEVEL_FOLDER}
    DOCKERFILE_FOLDER: "${DEBIAN_PACKAGE_DEVEL_FOLDER}/"
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

## rt-validation

docker-build-rt-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-rt-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${RT_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-stress-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-stress-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${STRESS_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-rt-tests-arm64:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-rt-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${RT_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

docker-build-stress-tests-arm64:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    IMAGE_ARCH: linux/arm64
    IMAGE_NAME: arm64v8-stress-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${STRESS_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base
  needs: ["pull-tag-and-push-debian-image"]

lint_dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    # Some rules cannot be applied in our specific cases.
    # However, since we don't want to completely ignore these rules,
    # we are changing the following rules to have the level "info":
    # - DL3002 (last user should not be root)
    # - DL3003 (use WORKDIR to switch to a directory)
    # - DL3006 (always tag the version of an image explicitly)
    # - DL3008 (pin versions in apt-get install)
    # - DL3020 (use COPY instead of ADD for files and folders)
    # - DL3029 (do not use --platform flag with FROM)
    # - DL4006 (set the SHELL option -o pipefail before RUN with a pipe in it)
    # - SC2039 (in POSIX sh, something is undefined)
    # - SC2046 (quote this to prevent word splitting)
    - hadolint */Dockerfile --failure-threshold warning --info DL3002 --info DL3003 --info DL3006 --info DL3008 --info DL3020 --info DL3029 --info DL4006 --info SC2039 --info SC2046

.shellcheck:
  stage: lint
  image: koalaman/shellcheck-alpine:latest

.shellcheck-git:
  extends: .shellcheck
  before_script:
    - apk update
    - apk add git
  script:
    git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck

shell-errors:
  extends: .shellcheck-git
# Let's incrementally fix the errors and then disable the allow_failure property for this job.
  allow_failure: true
  variables:
    SHELLCHECK_SEVERITY: 'error'

shell-warnings:
  extends: .shellcheck-git
  allow_failure: true
  variables:
    SHELLCHECK_SEVERITY: 'warning'

shell-format:
  image: mvdan/shfmt:v3.2.0-alpine
  stage: lint
  before_script:
    - apk update
    - apk add git
# Let's incrementally fix the errors and then disable the allow_failure property for this job.
  allow_failure: true
  script:
    - git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shfmt -i 2 -ci -d

# Make sure to create access token in "Settings/Access Tokens" section with "write_repository" scope selected.
# Then in "Settings/CI/CD/" section add a variable with key "GIT_TOKEN" and a value of the access token. Also mask the variable.
tag:
  stage: chores before building
  before_script:
    - if [ -z ${GIT_TOKEN} ]; then echo "Missing variable GIT_TOKEN." && exit 1; fi
    - TAGS="debian-${DEBIAN_MAJOR}.${DEBIAN_MINOR}.${DEBIAN_PATCH}
            wayland-base-${WAYLAND_BASE_MAJOR}.${WAYLAND_BASE_MINOR}.${WAYLAND_BASE_PATCH}
            weston-${WESTON_MAJOR}.${WESTON_MINOR}.${WESTON_PATCH}
            qt5-wayland-${QT5_WAYLAND_MAJOR}.${QT5_WAYLAND_MINOR}.${QT5_WAYLAND_PATCH}
            qt5-wayland-examples-${QT5_WAYLAND_EXAMPLES_MAJOR}.${QT5_WAYLAND_EXAMPLES_MINOR}.${QT5_WAYLAND_EXAMPLES_PATCH}
            wayland-base-vivante-${WAYLAND_BASE_VIVANTE_MAJOR}.${WAYLAND_BASE_VIVANTE_MINOR}.${WAYLAND_BASE_VIVANTE_PATCH}
            weston-vivante-${WESTON_VIVANTE_MAJOR}.${WESTON_VIVANTE_MINOR}.${WESTON_VIVANTE_PATCH}
            qt5-wayland-vivante-${QT5_WAYLAND_VIVANTE_MAJOR}.${QT5_WAYLAND_VIVANTE_MINOR}.${QT5_WAYLAND_VIVANTE_PATCH}
            qt5-wayland-examples-vivante-${QT5_WAYLAND_EXAMPLES_VIVANTE_MAJOR}.${QT5_WAYLAND_EXAMPLES_VIVANTE_MINOR}.${QT5_WAYLAND_EXAMPLES_VIVANTE_PATCH}
            weston-touch-calibrator-${WESTON_TOUCH_CALIBRATOR_MAJOR}.${WESTON_TOUCH_CALIBRATOR_MINOR}.${WESTON_TOUCH_CALIBRATOR_PATCH}
            graphics-tests-${GRAPHICS_TESTS_MAJOR}.${GRAPHICS_TESTS_MINOR}.${GRAPHICS_TESTS_PATCH}
            graphics-tests-vivante-${GRAPHICS_TESTS_VIVANTE_MAJOR}.${GRAPHICS_TESTS_VIVANTE_MINOR}.${GRAPHICS_TESTS_VIVANTE_PATCH}
            debian-cross-toolchains-${DEBIAN_CROSS_TOOLCHAINS_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_PATCH}
            debian-cross-toolchains-ssh-${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  script:
  - apk update && apk add git
  - git remote set-url origin https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}
  - for TAG in ${TAGS};
      do
        if git ls-remote --tags origin  | grep ${TAG} > /dev/null; then
          echo "${TAG} tag already exists.";
        else
          echo "Tagging repository with ${TAG} tag.";
          git tag --delete ${TAG} > /dev/null 2>&1 || true;
          git tag ${TAG};
          git push -o ci.skip origin ${TAG};
        fi
      done

# Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"true\"\n}' | tee $HOME/.docker/config.json"
    - docker version

.docker-build-multiarch:
  before_script:
    - *do_print_environment_variables
    - *do_docker_experimental
    - rm -rf ~/.docker/manifests/*
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${IMAGE_TAG}
  - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${IMAGE_TAG}
  - docker manifest create ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${IMAGE_TAG}
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_32}:${IMAGE_TAG} --os linux --arch arm
  - docker manifest annotate ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} ${CI_REGISTRY_IMAGE}/${IMAGE_NAME_64}:${IMAGE_TAG} --os linux --arch arm64
  - docker manifest inspect -v ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
  - docker manifest push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}

## debian-docker-images

docker-build-base-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DEBIAN_RELEASE}
    IMAGE_NAME: debian
    IMAGE_NAME_32: arm32v7-debian
    IMAGE_NAME_64: arm64v8-debian
  stage: build-base-multiarch
  needs: ["docker-build-base", "docker-build-base-arm64v8"]

docker-build-wayland-base-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${WAYLAND_BASE_MAJOR}
    IMAGE_NAME: wayland-base
    IMAGE_NAME_32: arm32v7-debian-wayland-base
    IMAGE_NAME_64: arm64v8-debian-wayland-base
  stage: build-stage1-multiarch
  needs: ["docker-build-wayland-base", "docker-build-wayland-base-arm64v8"]

docker-build-qt5-wayland-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${QT5_WAYLAND_MAJOR}
    IMAGE_NAME: qt5-wayland
    IMAGE_NAME_32: arm32v7-debian-qt5-wayland
    IMAGE_NAME_64: arm64v8-debian-qt5-wayland
  stage: build-stage2-multiarch
  needs: ["docker-build-qt5-wayland", "docker-build-qt5-wayland-arm64v8"]

docker-build-qt5-wayland-examples-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${QT5_WAYLAND_EXAMPLES_MAJOR}
    IMAGE_NAME: qt5-wayland-examples
    IMAGE_NAME_32: arm32v7-debian-qt5-wayland-examples
    IMAGE_NAME_64: arm64v8-debian-qt5-wayland-examples
  stage: build-stage3-multiarch
  needs: ["docker-build-qt5-wayland-examples", "docker-build-qt5-wayland-examples-arm64v8"]

docker-build-weston-touch-calibrator-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${WESTON_TOUCH_CALIBRATOR_MAJOR}
    IMAGE_NAME: weston-touch-calibrator
    IMAGE_NAME_32: arm32v7-debian-weston-touch-calibrator
    IMAGE_NAME_64: arm64v8-debian-weston-touch-calibrator
  stage: build-stage3-multiarch
  needs: ["docker-build-weston-touch-calibrator", "docker-build-weston-touch-calibrator-arm64v8"]

## rt-validation

docker-build-rt-tests-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}
    IMAGE_NAME: rt-tests
    IMAGE_NAME_32: arm32v7-rt-tests
    IMAGE_NAME_64: arm64v8-rt-tests
  stage: build-base-multiarch
  needs: ["docker-build-rt-tests", "docker-build-rt-tests-arm64"]

docker-build-stress-tests-multiarch:
  retry: 2
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}
    IMAGE_NAME: stress-tests
    IMAGE_NAME_32: arm32v7-stress-tests
    IMAGE_NAME_64: arm64v8-stress-tests
  stage: build-base-multiarch
  needs: ["docker-build-stress-tests", "docker-build-stress-tests-arm64"]

## debian-dotnet-development-images

docker-build-dotnet-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: dotnet
    IMAGE_NAME_32: arm32v7-dotnet
    IMAGE_NAME_64: arm64v8-dotnet
  stage: build-stage2-multiarch
  needs: ["docker-build-dotnet-arm32", "docker-build-dotnet-arm64"]

docker-build-aspnet-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: aspdotnet
    IMAGE_NAME_32: arm32v7-aspdotnet
    IMAGE_NAME_64: arm64v8-aspdotnet
  stage: build-stage2-multiarch
  needs: ["docker-build-dotnet-arm32-asp", "docker-build-dotnet-arm64-asp"]

docker-build-dotnet-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: dotnet-debug
    IMAGE_NAME_32: arm32v7-dotnet-debug
    IMAGE_NAME_64: arm64v8-dotnet-debug
  stage: build-stage3-multiarch
  needs: ["docker-build-dotnet-debug-arm32", "docker-build-dotnet-debug-arm64"]

docker-build-aspnet-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: aspdotnet-debug
    IMAGE_NAME_32: arm32v7-aspdotnet-debug
    IMAGE_NAME_64: arm64v8-aspdotnet-debug
  stage: build-stage3-multiarch
  needs: ["docker-build-dotnet-debug-arm32-asp", "docker-build-dotnet-debug-arm64-asp"]

docker-build-dotnet-uno-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: dotnet-uno
    IMAGE_NAME_32: arm32v7-dotnet-uno
    IMAGE_NAME_64: arm64v8-dotnet-uno
  stage: build-stage3-multiarch
  needs: ["docker-build-dotnet-arm32-uno", "docker-build-dotnet-arm64-uno"]

docker-build-dotnet-uno-debug-multiarch:
  extends: .docker-build-multiarch
  variables:
    IMAGE_TAG: ${DEBIAN_MAJOR}-${DOTNET_RELEASE}
    IMAGE_NAME: dotnet-uno-debug
    IMAGE_NAME_32: arm32v7-dotnet-uno-debug
    IMAGE_NAME_64: arm64v8-dotnet-uno-debug
  stage: build-stage4-multiarch
  needs: ["docker-build-dotnet-debug-arm32-uno", "docker-build-dotnet-debug-arm64-uno"]

# Bridge
#
# Trigger pipelines on other projects, for example, the Torizon samples

build-torizon-samples:
  when: manual
  stage: build-samples-bridge
  trigger:
    project: rd/torizon-core/samples
    branch: ${DEBIAN_RELEASE}
    strategy: depend
  # Don't fail a pipeline on the current project if the samples pipeline fail
  allow_failure: true

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_TOKEN is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  when: manual
  allow_failure: false
  script:
    - *do_docker_experimental
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export DATE=$(date +%Y%m%d)
    - export IMAGE_TAG="${MAJOR}${RELEASE_APPEND}"
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG}
    - >
      if [ -z "$DOTNET_VERSION" ]; then
        export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH}${RELEASE_APPEND} ${MAJOR}.${MINOR}.${PATCH}-${DATE}${RELEASE_APPEND}"
        export DOCKER_TAGS="${MAJOR}${RELEASE_APPEND} ${MAJOR}.${MINOR}${RELEASE_APPEND}"
      else
        export DOCKER_TAGS_CHECK="${MAJOR}-${DOTNET_VERSION} ${MAJOR}-${DOTNET_RELEASE} ${MAJOR}-${DATE}-${DOTNET_VERSION} ${MAJOR}-${DATE}-${DOTNET_RELEASE}"
      fi
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN;
    - for tag in ${DOCKER_TAGS_CHECK};
        do
          docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} > /dev/null && true; RESULT=$?;
          (if [ $RESULT == 0 ] && [ "${DEPLOY_CONDITIONALLY}" == "true" ]; then echo "Image with ${tag} tag already exists." && exit 1 ; fi);
        done
    - for tag in ${DOCKER_TAGS} ${DOCKER_TAGS_CHECK};
        do
          docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
          docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
        done

docker-deploy-base:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-debian
  stage: deploy
  needs: ["docker-build-base"]

docker-deploy-wayland-base:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-debian-wayland-base
  stage: deploy
  needs: ["docker-build-wayland-base"]

docker-deploy-weston:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WESTON_MAJOR}"
    - export MINOR="${WESTON_MINOR}"
    - export PATCH="${WESTON_PATCH}"
  variables:
    IMAGE_NAME: weston
  stage: deploy
  needs: ["docker-build-weston"]

docker-deploy-graphics-tests:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${GRAPHICS_TESTS_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_PATCH}"
  variables:
    IMAGE_NAME: graphics-tests
  stage: deploy
  needs: ["docker-build-graphics-tests"]

docker-deploy-weston-touch-calibrator:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-debian-weston-touch-calibrator
  stage: deploy
  needs: ["docker-build-weston-touch-calibrator"]

docker-deploy-qt5-wayland:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-debian-qt5-wayland
  stage: deploy
  needs: ["docker-build-qt5-wayland"]

docker-deploy-qt5-wayland-examples:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-debian-qt5-wayland-examples
  stage: deploy
  needs: ["docker-build-qt5-wayland-examples"]

docker-deploy-base-arm64v8:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-debian
  stage: deploy
  needs: ["docker-build-base-arm64v8"]

docker-deploy-wayland-base-arm64v8:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-debian-wayland-base
  stage: deploy
  needs: ["docker-build-wayland-base-arm64v8"]

docker-deploy-wayland-base-vivante:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WAYLAND_BASE_VIVANTE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_VIVANTE_MINOR}"
    - export PATCH="${WAYLAND_BASE_VIVANTE_PATCH}"
  variables:
    IMAGE_NAME: wayland-base-vivante
  stage: deploy
  needs: ["docker-build-wayland-base-vivante"]

docker-deploy-weston-vivante:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WESTON_VIVANTE_MAJOR}"
    - export MINOR="${WESTON_VIVANTE_MINOR}"
    - export PATCH="${WESTON_VIVANTE_PATCH}"
  variables:
    IMAGE_NAME: weston-vivante
  stage: deploy
  needs: ["docker-build-weston-vivante"]

docker-deploy-graphics-tests-vivante:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${GRAPHICS_TESTS_VIVANTE_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_VIVANTE_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_VIVANTE_PATCH}"
  variables:
    IMAGE_NAME: graphics-tests-vivante
  stage: deploy
  needs: ["docker-build-graphics-tests-vivante"]

docker-deploy-weston-touch-calibrator-arm64v8:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-debian-weston-touch-calibrator
  stage: deploy
  needs: ["docker-build-wayland-base"]

docker-deploy-qt5-wayland-arm64v8:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-debian-qt5-wayland
  stage: deploy
  needs: ["docker-build-weston-touch-calibrator-arm64v8"]

docker-deploy-qt5-wayland-vivante:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_VIVANTE_MAJOR}"
    - export MINOR="${QT5_WAYLAND_VIVANTE_MINOR}"
    - export PATCH="${QT5_WAYLAND_VIVANTE_PATCH}"
  variables:
    IMAGE_NAME: qt5-wayland-vivante
  stage: deploy
  needs: ["docker-build-qt5-wayland-arm64v8"]

docker-deploy-qt5-wayland-examples-arm64v8:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-debian-qt5-wayland-examples
  stage: deploy
  needs: ["docker-build-qt5-wayland-arm64v8"]

docker-deploy-qt5-wayland-examples-vivante:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_VIVANTE_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_VIVANTE_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_VIVANTE_PATCH}"
  variables:
    IMAGE_NAME: qt5-wayland-examples-vivante
  stage: deploy
  needs: ["docker-build-qt5-wayland-vivante"]


## debian-cross-toolchains

docker-deploy-armhf-toolchain:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy
  needs: ["docker-build-armhf-toolchain"]

docker-deploy-arm-toolchain:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm
  stage: deploy
  needs: ["docker-build-arm-toolchain"]

docker-deploy-armhf-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy
  needs: ["docker-build-armhf-toolchain-ssh"]

docker-deploy-arm64-toolchain:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy
  needs: ["docker-build-arm64-toolchain"]

docker-deploy-arm64-toolchain-vivante:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64-vivante
  stage: deploy
  needs: ["docker-build-arm64-toolchain-vivante"]

docker-deploy-arm64-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy
  needs: ["docker-build-arm64-toolchain-ssh"]

docker-deploy-x86-toolchain:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-amd64
  stage: deploy
  needs: ["docker-build-x86-toolchain"]

docker-deploy-x86-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-amd64
  stage: deploy
  needs: ["docker-build-x86-toolchain-ssh"]

docker-deploy-rcv-toolchain:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-riscv64
  stage: deploy
  needs: ["docker-build-rcv-toolchain"]

docker-deploy-rcv-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-riscv64
  stage: deploy
  needs: ["docker-build-rcv-toolchain-ssh"]

## rt-validation

docker-deploy-rt-tests:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-rt-tests
  stage: deploy
  needs: ["docker-build-rt-tests"]

docker-deploy-stress-tests:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm32v7-stress-tests
  stage: deploy
  needs: ["docker-build-stress-tests"]

docker-deploy-rt-tests-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-rt-tests
  stage: deploy
  needs: ["docker-build-rt-tests-arm64"]

docker-deploy-stress-tests-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    IMAGE_NAME: arm64v8-stress-tests
  stage: deploy
  needs: ["docker-build-stress-tests-arm64"]

## debian-dotnet-development

docker-deploy-dotnet-arm32:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-dotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm32"]

docker-deploy-dotnet-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-dotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm64"]

docker-deploy-dotnet-arm32-asp:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-aspdotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm32-asp"]

docker-deploy-dotnet-arm64-asp:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-aspdotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm64-asp"]

docker-deploy-dotnet-debug-arm32:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-dotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm32"]

docker-deploy-dotnet-debug-arm64:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-dotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm64"]

docker-deploy-dotnet-debug-arm32-asp:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-aspdotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm32-asp"]

docker-deploy-dotnet-debug-arm64-asp:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-aspdotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm64-asp"]

docker-deploy-dotnet-arm32-uno:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-dotnet-uno
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm32-uno"]

docker-deploy-dotnet-arm64-uno:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-dotnet-uno
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-arm64-uno"]

docker-deploy-dotnet-debug-arm32-uno:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm32v7-dotnet-uno-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm32-uno"]

docker-deploy-dotnet-debug-arm64-uno:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
  variables:
    IMAGE_NAME: arm64v8-dotnet-uno-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
    DOTNET_VERSION: ${DOTNET_SEMANTIC_VERSION}
  stage: deploy
  needs: ["docker-build-dotnet-debug-arm64-uno"]

.docker-deploy-multiarch:
  when: manual
  script:
  - *do_docker_experimental
  - export DATE=$(date +%Y%m%d)
  - >
    if [ -z "$DOTNET_VERSION" ]; then
      export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH}${RELEASE_APPEND} ${MAJOR}.${MINOR}.${PATCH}-${DATE}${RELEASE_APPEND}"
      export DOCKER_TAGS="${MAJOR}${RELEASE_APPEND} ${MAJOR}.${MINOR}${RELEASE_APPEND}"
    else
      export DOCKER_TAGS_CHECK="${MAJOR}-${DOTNET_VERSION} ${MAJOR}-${DOTNET_RELEASE} ${MAJOR}-${DATE}-${DOTNET_VERSION} ${MAJOR}-${DATE}-${DOTNET_RELEASE}"
    fi
  - *do_print_environment_variables
  - rm -rf ~/.docker/manifests/*
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
  - for tag in ${DOCKER_TAGS_CHECK};
      do
        docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} > /dev/null && true; RESULT=$?;
        (if [ $RESULT == 0 ] && [ "${DEPLOY_CONDITIONALLY}" == "true" ]; then echo "Image with ${tag} tag already exists." && exit 1 ; fi);
      done
  - for tag in ${DOCKER_TAGS} ${DOCKER_TAGS_CHECK};
      do
        docker manifest create ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${tag};
        docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_32}:${tag} --os linux --arch arm;
        docker manifest annotate ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME_64}:${tag} --os linux --arch arm64;
        docker manifest inspect -v ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
        docker manifest push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag};
      done

## debian-docker-images

docker-deploy-base-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    IMAGE_NAME: debian
    IMAGE_NAME_32: arm32v7-debian
    IMAGE_NAME_64: arm64v8-debian
  stage: deploy-multiarch
  needs: ["docker-build-base-multiarch"]

docker-deploy-wayland-base-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    IMAGE_NAME: wayland-base
    IMAGE_NAME_32: arm32v7-debian-wayland-base
    IMAGE_NAME_64: arm64v8-debian-wayland-base
  stage: deploy-multiarch
  needs: ["docker-build-wayland-base-multiarch"]

docker-deploy-qt5-wayland-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    IMAGE_NAME: qt5-wayland
    IMAGE_NAME_32: arm32v7-debian-qt5-wayland
    IMAGE_NAME_64: arm64v8-debian-qt5-wayland
  stage: deploy-multiarch
  needs: ["docker-build-qt5-wayland-multiarch"]

docker-deploy-qt5-wayland-examples-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    IMAGE_NAME: qt5-wayland-examples
    IMAGE_NAME_32: arm32v7-debian-qt5-wayland-examples
    IMAGE_NAME_64: arm64v8-debian-qt5-wayland-examples
  stage: deploy-multiarch
  needs: ["docker-build-qt5-wayland-examples-multiarch"]

docker-deploy-weston-touch-calibrator-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
  variables:
    IMAGE_NAME: weston-touch-calibrator
    IMAGE_NAME_32: arm32v7-debian-weston-touch-calibrator
    IMAGE_NAME_64: arm64v8-debian-weston-touch-calibrator
  stage: deploy-multiarch
  needs: ["docker-build-weston-touch-calibrator-multiarch"]

## rt-validation

docker-deploy-rt-tests-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    IMAGE_NAME: rt-tests
    IMAGE_NAME_32: arm32v7-rt-tests
    IMAGE_NAME_64: arm64v8-rt-tests
  stage: deploy-multiarch
  needs: ["docker-build-rt-tests-multiarch"]

docker-deploy-stress-tests-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    IMAGE_NAME: stress-tests
    IMAGE_NAME_32: arm32v7-stress-tests
    IMAGE_NAME_64: arm64v8-stress-tests
  stage: deploy-multiarch
  needs: ["docker-build-stress-tests-multiarch"]

# dotnet-development-images

docker-deploy-dotnet-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: dotnet
    IMAGE_NAME_32: arm32v7-dotnet
    IMAGE_NAME_64: arm64v8-dotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-dotnet-multiarch"]

docker-deploy-aspnet-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: aspdotnet
    IMAGE_NAME_32: arm32v7-aspdotnet
    IMAGE_NAME_64: arm64v8-aspdotnet
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-aspnet-multiarch"]

docker-deploy-dotnet-debug-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: dotnet-debug
    IMAGE_NAME_32: arm32v7-dotnet-debug
    IMAGE_NAME_64: arm64v8-dotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-dotnet-debug-multiarch"]

docker-deploy-aspnet-debug-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: aspdotnet-debug
    IMAGE_NAME_32: arm32v7-aspdotnet-debug
    IMAGE_NAME_64: arm64v8-aspdotnet-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-aspnet-debug-multiarch"]

docker-deploy-dotnet-uno-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: dotnet-uno
    IMAGE_NAME_32: arm32v7-dotnet-uno
    IMAGE_NAME_64: arm64v8-dotnet-uno
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-dotnet-uno-multiarch"]

docker-deploy-dotnet-uno-debug-multiarch:
  extends: .docker-deploy-multiarch
  before_script:
    - export MAJOR="${DEBIAN_MAJOR}"
    - export DOTNET_VERSION="${DOTNET_SEMANTIC_VERSION}"
  variables:
    IMAGE_NAME: dotnet-uno-debug
    IMAGE_NAME_32: arm32v7-dotnet-uno-debug
    IMAGE_NAME_64: arm64v8-dotnet-uno-debug
    RELEASE_APPEND: "-${DOTNET_RELEASE}"
  stage: deploy-multiarch
  needs: ["docker-build-dotnet-uno-debug-multiarch"]

