image: docker:latest

variables:
  DEBIAN_RELEASE: "bullseye"
  DEBIAN_BASE_IMAGE: "bullseye-slim"

  # container version
  DEBIAN_CROSS_TOOLCHAINS_MAJOR: "2"
  DEBIAN_CROSS_TOOLCHAINS_MINOR: "7"
  DEBIAN_CROSS_TOOLCHAINS_PATCH: "0"

  DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR: "2"
  DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR: "7"
  DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH: "0"

  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  GITLAB_DOCKERREGISTRY_SUFFIX: ${CI_COMMIT_REF_SLUG}-${CI_PIPELINE_ID}
  GITLAB_DOCKERREGISTRY_SUFFIX_LATEST: ${CI_COMMIT_REF_SLUG}-latest

services:
  - name: docker:dind

stages:
  - lint
  - repository-tagging
  - build-base
  - build-ssh
  - build-samples-bridge
  - deploy

# Docker image builds
#
# Build the Docker images  specified in DOCKERFILE_FOLDER/IMAGE_NAME and push
# it to Gitlab's internal Docker registry
.docker-build:
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker info
    - if test -n "${BASE_NAME}"; then docker pull ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} && docker tag ${CI_REGISTRY_IMAGE}/${BASE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} torizon/${BASE_NAME}:${MAJOR} ; fi || exit 1
    # Try to download latest image for cache, but don't fail if it does not exist
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST} || true
    - docker pull ${CI_REGISTRY}/rd/torizon-core-containers/debian-cross-toolchains/${IMAGE_NAME}:${DEBIAN_RELEASE}-latest || true
    - export DATE=$(date +%Y%m%d)
    - docker build --build-arg ARCH_ARG=${ARCH_ARG}
      --build-arg IMAGE_TAG=${MAJOR}
      --build-arg CROSS_COMPILE_ARG=${CROSS_COMPILE_ARG}
      --build-arg DEBIAN_BASE_IMAGE=${DEBIAN_BASE_IMAGE}
      --build-arg TORADEX_SNAPSHOT=${TORADEX_SNAPSHOT:-20210909T072507Z}
      --build-arg USE_TORADEX_SNAPSHOT=${USE_TORADEX_SNAPSHOT:-1}
      --cache-from ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKER_NO_CACHE:+--no-cache}
      --label container.name=${IMAGE_NAME}
      --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE}
      --label git.branch=${CI_COMMIT_BRANCH}
      --label git.hash=${CI_COMMIT_SHA}
      --label pipeline.id=${CI_PIPELINE_ID}
      -f ${DOCKERFILE_FOLDER}Dockerfile
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
      -t ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}
      ${DOCKERFILE_FOLDER}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker push ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX_LATEST}

docker-build-armhf-toolchain:
  extends: .docker-build
  needs: []
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    ARCH_ARG: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-armhf
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-arm-toolchain:
  extends: .docker-build
  needs: []
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    ARCH_ARG: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-arm
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-armhf-toolchain-ssh:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    ARCH_ARG: armhf
    BASE_NAME: debian-cross-toolchain-armhf
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

docker-build-arm64-toolchain:
  extends: .docker-build
  needs: []
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    ARCH_ARG: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64
    DOCKERFILE_FOLDER: "base/"
  stage: build-base

docker-build-arm64-toolchain-ssh:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    ARCH_ARG: arm64
    BASE_NAME: debian-cross-toolchain-arm64
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
    DOCKERFILE_FOLDER: "ssh/"
  stage: build-ssh

docker-build-x86-toolchain:
  extends: .docker-build
  needs: []
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    ARCH_ARG: amd64
    CROSS_COMPILE_ARG: x86_64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-amd64
    DOCKERFILE_FOLDER: "base/"
    USE_TORADEX_SNAPSHOT: 0
  stage: build-base

docker-build-x86-toolchain-ssh:
  extends: .docker-build
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  variables:
    ARCH_ARG: amd64
    BASE_NAME: debian-cross-toolchain-amd64
    IMAGE_NAME: debian-cross-toolchain-ssh-amd64
    DOCKERFILE_FOLDER: "ssh/"
    USE_TORADEX_SNAPSHOT: 0
  stage: build-ssh

lint_dockerfile:
  stage: lint
  image: hadolint/hadolint:latest-debian
  script:
    # Some rules cannot be applied in our specific cases.
    # However, since we don't want to completely ignore these rules,
    # we are changing the following rules to have the level "info":
    #- DL3008 (pin versions in apt-get install)
    #- DL3020 (use COPY instead of ADD for files and folders)
    #- DL4006 (set the SHELL option -o pipefail before RUN with a pipe in it)
    #- SC2046 (quote this to prevent word splitting)
    - hadolint */Dockerfile --failure-threshold warning --info DL3008 --info DL3020 --info DL4006 --info SC2046

# Make sure to create access token in "Settings/Access Tokens" section with "write_repository" scope selected.
# Then in "Settings/CI/CD/" section add a variable with key "GIT_TOKEN" and a value of the access token. Also mask the variable.
tag:
  stage: repository-tagging
  needs: []
  before_script:
    - if [ -z ${GIT_TOKEN} ]; then echo "Missing variable GIT_TOKEN." && exit 1; fi
    - TAGS="debian-cross-toolchains-${DEBIAN_CROSS_TOOLCHAINS_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_PATCH}
            debian-cross-toolchains-ssh-${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
  script:
    - apk update && apk add git
    - git remote set-url origin https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}
    - for TAG in ${TAGS};
        do
          if git ls-remote --tags origin  | grep ${TAG} > /dev/null; then
            echo "${TAG} tag already exists.";
          else
            echo "Tagging repository with ${TAG} tag.";
            git tag --delete ${TAG} > /dev/null 2>&1 || true;
            git tag ${TAG};
            git push -o ci.skip origin ${TAG};
          fi
        done

# Bridge
#
# Trigger pipelines on other projects, for example, the Torizon samples

build-torizon-samples:
  when: manual
  stage: build-samples-bridge
  trigger:
    project: rd/torizon-core/samples
    branch: ${DEBIAN_RELEASE}
    strategy: depend
  # Don't fail a pipeline on the current project if the samples pipeline fail
  allow_failure: true

# Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
  - mkdir -p $HOME/.docker
  - "echo -e '{\n  \"experimental\": \"enabled\"\n}' | tee $HOME/.docker/config.json"
  - docker version

# Docker deploy jobs
#
# Make sure DOCKER_HUB_USER/DOCKER_HUB_TOKEN is properly set in the project
# specific Gitlab CI settings.
.docker-deploy:
  when: manual
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX}
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
    - for tag in ${DOCKER_TAGS_CHECK};
        do
          docker manifest inspect ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag}-${DEBIAN_RELEASE} > /dev/null && true; RESULT=$?;
          (if [ $RESULT == 0 ] ; then echo "Image with ${tag} tag already exists." && exit 1 ; fi);
        done
    - for tag in ${DOCKER_TAGS} ${DOCKER_TAGS_CHECK};
        do
          docker tag ${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:${GITLAB_DOCKERREGISTRY_SUFFIX} ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag}-${DEBIAN_RELEASE};
          docker push ${DOCKER_HUB_REPOSITORY}/${IMAGE_NAME}:${tag}-${DEBIAN_RELEASE};
        done

docker-deploy-armhf-toolchain:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-armhf
  stage: deploy

docker-deploy-arm-toolchain:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm
  stage: deploy

docker-deploy-armhf-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
  stage: deploy

docker-deploy-arm64-toolchain:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-arm64
  stage: deploy

docker-deploy-arm64-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
  stage: deploy

docker-deploy-x86-toolchain:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-amd64
  stage: deploy

docker-deploy-x86-toolchain-ssh:
  extends: .docker-deploy
  before_script:
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DATE=$(date +%Y%m%d)
    - export DOCKER_TAGS_CHECK="${MAJOR}.${MINOR}.${PATCH} ${MAJOR}.${MINOR}.${PATCH}-${DATE}"
    - export DOCKER_TAGS="${MAJOR} ${MAJOR}.${MINOR}"
  variables:
    IMAGE_NAME: debian-cross-toolchain-ssh-amd64
  stage: deploy
