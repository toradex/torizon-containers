image: docker:latest

variables:
  # DEBIAN_* variables are overwritten for jobs outside the branch of the current Debian stable
  DEBIAN_RELEASE: "bookworm"
  DEBIAN_BASE_IMAGE: "bookworm-slim"
  TORADEX_INTERNAL_DOCKERHUB_CACHE: "artifactory-horw.int.toradex.com/dockerhub-proxy-horw"
  DOCKERHUB_NAMESPACE: "torizon"

  # When running a deploy job, push the container even if the tag already exists.
  # Can be overriden by setting "DEPLOY_CONDITIONALLY" to anything other than "true" when starting a new job manually.
  DEPLOY_CONDITIONALLY: "true"

  # Images should only be pushed to container registry if the ci is launched
  # from the default branch and not from feature branches
  DEFAULT_BRANCH: "rc"

  # Container versions, used as final tags for the image.

  # Upstream containers

  DEBIAN_MAJOR: "rc"
  DEBIAN_MINOR: "0"
  DEBIAN_PATCH: "0"

  GRAPHICS_TESTS_MAJOR: "rc"
  GRAPHICS_TESTS_MINOR: "0"
  GRAPHICS_TESTS_PATCH: "0"

  QT5_WAYLAND_MAJOR: "rc"
  QT5_WAYLAND_MINOR: "0"
  QT5_WAYLAND_PATCH: "0"

  QT5_WAYLAND_EXAMPLES_MAJOR: "rc"
  QT5_WAYLAND_EXAMPLES_MINOR: "0"
  QT5_WAYLAND_EXAMPLES_PATCH: "0"

  QT6_WAYLAND_MAJOR: "rc"
  QT6_WAYLAND_MINOR: "0"
  QT6_WAYLAND_PATCH: "0"

  QT6_WAYLAND_EXAMPLES_MAJOR: "rc"
  QT6_WAYLAND_EXAMPLES_MINOR: "0"
  QT6_WAYLAND_EXAMPLES_PATCH: "0"

  WAYLAND_BASE_MAJOR: "rc"
  WAYLAND_BASE_MINOR: "0"
  WAYLAND_BASE_PATCH: "0"

  WESTON_MAJOR: "rc"
  WESTON_MINOR: "0"
  WESTON_PATCH: "0"

  WESTON_TOUCH_CALIBRATOR_MAJOR: "rc"
  WESTON_TOUCH_CALIBRATOR_MINOR: "0"
  WESTON_TOUCH_CALIBRATOR_PATCH: "0"

  CHROMIUM_MAJOR: "rc"
  CHROMIUM_MINOR: "0"
  CHROMIUM_PATCH: "0"

  COG_MAJOR: "rc"
  COG_MINOR: "0"
  COG_PATCH: "0"

  # iMX8 containers

  DEBIAN_IMX8_MAJOR: "rc"
  DEBIAN_IMX8_MINOR: "0"
  DEBIAN_IMX8_PATCH: "0"

  GRAPHICS_TESTS_IMX8_MAJOR: "rc"
  GRAPHICS_TESTS_IMX8_MINOR: "0"
  GRAPHICS_TESTS_IMX8_PATCH: "0"

  QT5_WAYLAND_IMX8_MAJOR: "rc"
  QT5_WAYLAND_IMX8_MINOR: "0"
  QT5_WAYLAND_IMX8_PATCH: "0"

  QT5_WAYLAND_EXAMPLES_IMX8_MAJOR: "rc"
  QT5_WAYLAND_EXAMPLES_IMX8_MINOR: "0"
  QT5_WAYLAND_EXAMPLES_IMX8_PATCH: "0"

  QT6_WAYLAND_IMX8_MAJOR: "rc"
  QT6_WAYLAND_IMX8_MINOR: "0"
  QT6_WAYLAND_IMX8_PATCH: "0"

  QT6_WAYLAND_EXAMPLES_IMX8_MAJOR: "rc"
  QT6_WAYLAND_EXAMPLES_IMX8_MINOR: "0"
  QT6_WAYLAND_EXAMPLES_IMX8_PATCH: "0"

  WAYLAND_BASE_IMX8_MAJOR: "rc"
  WAYLAND_BASE_IMX8_MINOR: "0"
  WAYLAND_BASE_IMX8_PATCH: "0"

  WESTON_IMX8_MAJOR: "rc"
  WESTON_IMX8_MINOR: "0"
  WESTON_IMX8_PATCH: "0"

  WESTON_IMX8_TOUCH_CALIBRATOR_MAJOR: "rc"
  WESTON_IMX8_TOUCH_CALIBRATOR_MINOR: "0"
  WESTON_IMX8_TOUCH_CALIBRATOR_PATCH: "0"

  CHROMIUM_IMX8_MAJOR: "rc"
  CHROMIUM_IMX8_MINOR: "0"
  CHROMIUM_IMX8_PATCH: "0"

  COG_IMX8_MAJOR: "rc"
  COG_IMX8_MINOR: "0"
  COG_IMX8_PATCH: "0"

  # am62 containers

  DEBIAN_AM62_MAJOR: "rc"
  DEBIAN_AM62_MINOR: "0"
  DEBIAN_AM62_PATCH: "0"

  GRAPHICS_TESTS_AM62_MAJOR: "rc"
  GRAPHICS_TESTS_AM62_MINOR: "0"
  GRAPHICS_TESTS_AM62_PATCH: "0"

  QT5_WAYLAND_AM62_MAJOR: "rc"
  QT5_WAYLAND_AM62_MINOR: "0"
  QT5_WAYLAND_AM62_PATCH: "0"

  QT5_WAYLAND_EXAMPLES_AM62_MAJOR: "rc"
  QT5_WAYLAND_EXAMPLES_AM62_MINOR: "0"
  QT5_WAYLAND_EXAMPLES_AM62_PATCH: "0"

  QT6_WAYLAND_AM62_MAJOR: "rc"
  QT6_WAYLAND_AM62_MINOR: "0"
  QT6_WAYLAND_AM62_PATCH: "0"

  QT6_WAYLAND_EXAMPLES_AM62_MAJOR: "rc"
  QT6_WAYLAND_EXAMPLES_AM62_MINOR: "0"
  QT6_WAYLAND_EXAMPLES_AM62_PATCH: "0"

  WAYLAND_BASE_AM62_MAJOR: "rc"
  WAYLAND_BASE_AM62_MINOR: "0"
  WAYLAND_BASE_AM62_PATCH: "0"

  WESTON_AM62_MAJOR: "rc"
  WESTON_AM62_MINOR: "0"
  WESTON_AM62_PATCH: "0"

  WESTON_AM62_TOUCH_CALIBRATOR_MAJOR: "rc"
  WESTON_AM62_TOUCH_CALIBRATOR_MINOR: "0"
  WESTON_AM62_TOUCH_CALIBRATOR_PATCH: "0"

  CHROMIUM_AM62_MAJOR: "rc"
  CHROMIUM_AM62_MINOR: "0"
  CHROMIUM_AM62_PATCH: "0"

  COG_AM62_MAJOR: "rc"
  COG_AM62_MINOR: "0"
  COG_AM62_PATCH: "0"

  CHROMIUM_TESTS_AM62_MAJOR: "rc"
  CHROMIUM_TESTS_AM62_MINOR: "0"
  CHROMIUM_TESTS_AM62_PATCH: "0"

  ## debian-cross-toolchains

  DEBIAN_CROSS_TOOLCHAINS_MAJOR: "rc"
  DEBIAN_CROSS_TOOLCHAINS_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_PATCH: "0"

  DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR: "rc"
  DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR: "0"
  DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH: "0"

  ## debian-dotnet-development-images

  ### Dotnet 6

  DOTNET_6_RELEASE: "6.0"

  DOTNET_6_MAJOR: "rc"
  DOTNET_6_MINOR: "0"
  DOTNET_6_PATCH: "0"

  ASPDOTNET_6_MAJOR: "rc"
  ASPDOTNET_6_MINOR: "0"
  ASPDOTNET_6_PATCH: "0"

  DOTNET_6_DEBUG_MAJOR: "rc"
  DOTNET_6_DEBUG_MINOR: "0"
  DOTNET_6_DEBUG_PATCH: "0"

  ASPDOTNET_6_DEBUG_MAJOR: "rc"
  ASPDOTNET_6_DEBUG_MINOR: "0"
  ASPDOTNET_6_DEBUG_PATCH: "0"

  DOTNET_6_UNO_MAJOR: "rc"
  DOTNET_6_UNO_MINOR: "0"
  DOTNET_6_UNO_PATCH: "0"

  DOTNET_6_UNO_DEBUG_MAJOR: "rc"
  DOTNET_6_UNO_DEBUG_MINOR: "0"
  DOTNET_6_UNO_DEBUG_PATCH: "0"

  DOTNET_6_SEMANTIC_VERSION: "6.0.16"

  ### Dotnet 8

  DOTNET_8_RELEASE: "8.0"

  DOTNET_8_MAJOR: "rc"
  DOTNET_8_MINOR: "0"
  DOTNET_8_PATCH: "0"

  ASPDOTNET_8_MAJOR: "rc"
  ASPDOTNET_8_MINOR: "0"
  ASPDOTNET_8_PATCH: "0"

  DOTNET_8_DEBUG_MAJOR: "rc"
  DOTNET_8_DEBUG_MINOR: "0"
  DOTNET_8_DEBUG_PATCH: "0"

  ASPDOTNET_8_DEBUG_MAJOR: "rc"
  ASPDOTNET_8_DEBUG_MINOR: "0"
  ASPDOTNET_8_DEBUG_PATCH: "0"

  DOTNET_8_UNO_MAJOR: "rc"
  DOTNET_8_UNO_MINOR: "0"
  DOTNET_8_UNO_PATCH: "0"

  DOTNET_8_UNO_DEBUG_MAJOR: "rc"
  DOTNET_8_UNO_DEBUG_MINOR: "0"
  DOTNET_8_UNO_DEBUG_PATCH: "0"

  DOTNET_8_SEMANTIC_VERSION: "8.0.0"

  # The latest version of vsdbg can be obtained by running the follow command:
  #curl -sSL https://aka.ms/getvsdbgsh | /bin/sh /dev/stdin -v latest -l ~/vsdbg
  DOTNET_DEBUGGER_RELEASE: "17.6.10208.1"

  # This should be set by docker image already, just to be sure...
  DOCKER_HOST: tcp://docker:2375
  # Use overlayfs driver for better performance
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2

  ## rt-validation

  RT_TESTS_MAJOR: "rc"
  RT_TESTS_MINOR: "0"
  RT_TESTS_PATCH: "0"

  STRESS_TESTS_MAJOR: "rc"
  STRESS_TESTS_MINOR: "0"
  STRESS_TESTS_PATCH: "0"

# extract the folder names as variables so we can easily change/introduce
# jobs and as to not replicate the folder names in `changes:` tags as well

  DEBIAN_DOCKER_IMAGES_FOLDER: "debian-docker-images"
  IMX8_FOLDER: "imx8"
  AM62_FOLDER: "am62"
  UPSTREAM_FOLDER: "upstream"

  DEBIAN_CROSS_TOOLCHAINS_FOLDER: "debian-cross-toolchains"
  DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER: "debian-dotnet-development-images"

  SSH_FOLDER: "ssh"

  BASE_IMX8_FOLDER: "base-imx8"
  TESTS_IMX8_FOLDER: "tests-imx8"
  GRAPHICS_TESTS_IMX8_FOLDER: "graphics-tests-imx8"
  QT5_WAYLAND_EXAMPLES_IMX8_FOLDER: "qt5-wayland-examples-imx8"
  QT6_WAYLAND_EXAMPLES_IMX8_FOLDER: "qt6-wayland-examples-imx8"
  QT5_WAYLAND_IMX8_FOLDER: "qt5-wayland-imx8"
  QT6_WAYLAND_IMX8_FOLDER: "qt6-wayland-imx8"
  WAYLAND_BASE_IMX8_FOLDER: "wayland-base-imx8"
  WESTON_TOUCH_CALIBRATOR_IMX8_FOLDER: "weston-touch-calibrator-imx8"
  WESTON_IMX8_FOLDER: "weston-imx8"
  CHROMIUM_IMX8_FOLDER: "chromium-imx8"
  COG_IMX8_FOLDER: "cog-imx8"

  BASE_AM62_FOLDER: "base-am62"
  TESTS_AM62_FOLDER: "tests-am62"
  GRAPHICS_TESTS_AM62_FOLDER: "graphics-tests-am62"
  QT5_WAYLAND_EXAMPLES_AM62_FOLDER: "qt5-wayland-examples-am62"
  QT6_WAYLAND_EXAMPLES_AM62_FOLDER: "qt6-wayland-examples-am62"
  QT5_WAYLAND_AM62_FOLDER: "qt5-wayland-am62"
  QT6_WAYLAND_AM62_FOLDER: "qt6-wayland-am62"
  WAYLAND_BASE_AM62_FOLDER: "wayland-base-am62"
  WESTON_TOUCH_CALIBRATOR_AM62_FOLDER: "weston-touch-calibrator-am62"
  WESTON_AM62_FOLDER: "weston-am62"
  CHROMIUM_AM62_FOLDER: "chromium-am62"
  CHROMIUM_AM62_TESTS_FOLDER: "chromium-tests-am62"
  COG_AM62_FOLDER: "cog-am62"

  BASE_FOLDER: "base"
  TESTS_FOLDER: "tests"
  GRAPHICS_TESTS_FOLDER: "graphics-tests"
  QT5_WAYLAND_FOLDER: "qt5-wayland"
  QT5_WAYLAND_EXAMPLES_FOLDER: "qt5-wayland-examples"
  QT6_WAYLAND_FOLDER: "qt6-wayland"
  QT6_WAYLAND_EXAMPLES_FOLDER: "qt6-wayland-examples"
  WAYLAND_BASE_FOLDER: "wayland-base"
  WESTON_FOLDER: "weston"
  WESTON_TOUCH_CALIBRATOR_FOLDER: "weston-touch-calibrator"
  CHROMIUM_FOLDER: "chromium"
  COG_FOLDER: "cog"

  DEBUG_FOLDER: "debug"
  UNO_BASE_FOLDER: "uno-base"
  UNO_DEBUG_FOLDER: "uno-debug"

  RT_TESTS_FOLDER: "rt-tests"
  RT_VALIDATION_FOLDER: "rt-validation"
  STRESS_TESTS_FOLDER: "stress-tests"

services:
  - name: docker:dind

.do_print_environment_variables: &do_print_environment_variables
  - echo "GitLab CI/CD environment variables:"
  - env

# images have dependencies between them with the `needs` keyword so we
# have faster builds and the nice graph showing the relation between
# containers that gitlab plots in the ci/cd runs view. So these stages
# are nothing more than a way to visually arrange jobs. They are *not*
# used to order jobs.
stages:
  - lint
  - repository tagging
  - chores before building
  - build-base
  - build-stage1
  - build-stage2
  - build-stage3
  - build-stage4
  - test

.include-regctl:
  variables:
    REGCTL_HASH: "484f98e99c90341336b1be99b2b333e7129fde3535b54ef97b4673e8fb2b1d6c"
  before_script:
    - apk update && apk add curl
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - curl -L https://github.com/regclient/regclient/releases/download/v0.5.1/regctl-linux-amd64 > regctl
    # to update the hash: download the metadata the regctl repo, verify the signatures, generate the SHA256SUMS file
    # with `sha256sum -b regctl > SHA256SUMS` and update it here.
    - echo "484f98e99c90341336b1be99b2b333e7129fde3535b54ef97b4673e8fb2b1d6c *regctl" > SHA256SUMS
    - if ! sha256sum -c SHA256SUMS; then echo "Checksum for regctl has failed"; fi
    - chmod 755 regctl

# Enable experimental features in Docker client (experimental feature are needed for manifest)
.do_docker_experimental: &do_docker_experimental
    - mkdir -p $HOME/.docker
    - "echo -e '{\n  \"experimental\": \"true\"\n}' | tee $HOME/.docker/config.json"
    - docker version

.docker-build:
  variables:
    ADD_TORADEX_REPOSITORY: 1
  script:
  - *do_docker_experimental
  - *do_print_environment_variables
  - apk add curl
  - export IMAGE_TAG="${MAJOR}${RELEASE_APPEND}"
  - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_TOKEN
  - docker info
  - export DATE=$(date +%Y%m%d)
  - |
    if [[ "${CI_COMMIT_BRANCH}" == "${DEFAULT_BRANCH}" ]]; then
      export PUSH_TO_REGISTRY="--push"
      echo "Pushing images to ${DOCKERHUB_NAMESPACE}"
    fi

  - |
    if [[ "${IMAGE_NAME}" == *imx8 ]]; then
      export TORADEX_SNAPSHOT=$(curl https://feeds.toradex.com/debian/snapshots/latest-snapshot)
    elif [[ "${IMAGE_NAME}" == *am62 ]]; then
      export TORADEX_SNAPSHOT=$(curl https://feeds.toradex.com/debian-am62/snapshots/latest-snapshot)
    else
      echo "Assuming upstream image."
    fi

  - docker buildx create --name multiarch-builder --driver docker-container --platform linux/arm/v7,linux/arm64/v8,linux/amd64 --use
  - docker buildx inspect --bootstrap
  - docker run --privileged --rm tonistiigi/binfmt --install arm64,arm

  - if [ -n "$BUILD_FOR_ARM_V7" ]; then echo "Building for linux/arm/v7" && PLATFORM_BUILD_ARM_V7="--platform linux/arm/v7"; fi
  - if [ -n "$BUILD_FOR_ARM_V8" ]; then echo "Building for linux/arm64/v8" && PLATFORM_BUILD_ARM_V8="--platform linux/arm64/v8"; fi
  - if [ -n "$BUILD_FOR_AMD64" ]; then echo "Building for linux/amd64" && PLATFORM_BUILD_AMD64="--platform linux/amd64"; fi

  - docker buildx build --progress=plain --sbom=true ${PUSH_TO_REGISTRY} ${PLATFORM_BUILD_ARM_V7} ${PLATFORM_BUILD_ARM_V8} ${PLATFORM_BUILD_AMD64}
                  --build-arg CROSS_COMPILER_TARGET_ARCH=${CROSS_COMPILER_TARGET_ARCH}
                  --build-arg DOCKER_REGISTRY=${TORADEX_INTERNAL_DOCKERHUB_CACHE}
                  --build-arg BASE_NAME=${BASE_NAME}
                  --build-arg DEBIAN_BASE_IMAGE=${DEBIAN_BASE_IMAGE}
                  --build-arg IMAGE_TAG=${DOCKER_BASE_TAG}
                  --build-arg ADD_TORADEX_REPOSITORY=${ADD_TORADEX_REPOSITORY}
                  --build-arg ACCEPT_FSL_EULA=${ACCEPT_FSL_EULA}
                  --build-arg QT5_EXAMPLES_DEBIAN=${QT5_EXAMPLES_DEBIAN}
                  --build-arg TORADEX_SNAPSHOT=${TORADEX_SNAPSHOT}
                  --build-arg BASE_NAME_DEBUG=${BASE_NAME_DEBUG}
                  --build-arg DOTNET_BASE_IMAGE_TAG=${DEBIAN_MAJOR}${RELEASE_APPEND}
                  --build-arg DEBIAN_BASE_IMAGE_TAG=${DEBIAN_BASE_IMAGE}
                  --build-arg DOTNET_RUNTIME=${DOTNET_RUNTIME}
                  --build-arg DOTNET_VERSION=${DOTNET_VERSION}
                  --build-arg DOTNET_DEBUGGER_RELEASE=${DOTNET_DEBUGGER_RELEASE}
                  --build-arg BASE_TAG_WAYLAND=${DEBIAN_MAJOR}
                  --build-arg BASE_NAME_WAYLAND=${BASE_NAME_WAYLAND}
                  ${DOCKER_NO_CACHE:+--no-cache}
                  --label container.name=${IMAGE_NAME}
                  --label container.version=${MAJOR}.${MINOR}.${PATCH}-${DATE}
                  --label git.branch=${CI_COMMIT_BRANCH}
                  --label git.hash=${CI_COMMIT_SHA}
                  --label pipeline.id=${CI_PIPELINE_ID}
                  -f ${DOCKERFILE_FOLDER}Dockerfile
                  -t ${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}
                  ${DOCKERFILE_FOLDER}
  - if [ -n "$BUILD_FOR_ARM_V7" ]; then docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/bitnami/trivy image --no-progress --exit-code 0 --platform linux/arm/v7 ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}; fi
  - if [ -n "$BUILD_FOR_ARM_V8" ]; then docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/bitnami/trivy image --no-progress --exit-code 0 --platform linux/arm64 ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}; fi
  - if [ -n "$BUILD_FOR_AMD64" ]; then docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/bitnami/trivy image --no-progress --exit-code 0 --platform linux/amd64 ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}; fi

## debian-docker-images

# upstream

docker-build-base:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: debian
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${BASE_FOLDER}/"
  stage: build-base

docker-build-wayland-base:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_MAJOR}"
    - export MINOR="${WAYLAND_BASE_MINOR}"
    - export PATCH="${WAYLAND_BASE_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: debian
    IMAGE_NAME: wayland-base
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${WAYLAND_BASE_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base"]

docker-build-weston:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_MAJOR}"
    - export MAJOR="${WESTON_MAJOR}"
    - export MINOR="${WESTON_MINOR}"
    - export PATCH="${WESTON_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: weston
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${WESTON_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-graphics-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${GRAPHICS_TESTS_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: graphics-tests
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${TESTS_FOLDER}/${GRAPHICS_TESTS_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-weston-touch-calibrator:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_MAJOR}"
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: weston
    IMAGE_NAME: weston-touch-calibrator
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${WESTON_TOUCH_CALIBRATOR_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-weston"]

docker-build-qt5-wayland:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_MAJOR}"
    - export MINOR="${QT5_WAYLAND_MINOR}"
    - export PATCH="${QT5_WAYLAND_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: qt5-wayland
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${QT5_WAYLAND_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-qt5-wayland-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: qt5-wayland
    IMAGE_NAME: qt5-wayland-examples
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${QT5_WAYLAND_EXAMPLES_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland"]

docker-build-qt6-wayland:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_MAJOR}"
    - export MINOR="${QT6_WAYLAND_MINOR}"
    - export PATCH="${QT6_WAYLAND_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: qt6-wayland
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${QT6_WAYLAND_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-qt6-wayland-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT6_WAYLAND_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_EXAMPLES_MAJOR}"
    - export MINOR="${QT6_WAYLAND_EXAMPLES_MINOR}"
    - export PATCH="${QT6_WAYLAND_EXAMPLES_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: qt6-wayland
    IMAGE_NAME: qt6-wayland-examples
    QT6_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${QT6_WAYLAND_EXAMPLES_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt6-wayland"]

docker-build-chromium:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${CHROMIUM_MAJOR}"
    - export MINOR="${CHROMIUM_MINOR}"
    - export PATCH="${CHROMIUM_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: chromium
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${CHROMIUM_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

docker-build-cog:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_MAJOR}"
    - export MAJOR="${COG_MAJOR}"
    - export MINOR="${COG_MINOR}"
    - export PATCH="${COG_PATCH}"
  variables:
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: wayland-base
    IMAGE_NAME: cog
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${UPSTREAM_FOLDER}/${COG_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base"]

# imx8

docker-build-base-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    IMAGE_NAME: debian-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${BASE_IMX8_FOLDER}/"
  stage: build-base

docker-build-wayland-base-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MINOR="${WAYLAND_BASE_IMX8_MINOR}"
    - export PATCH="${WAYLAND_BASE_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: debian-imx8
    IMAGE_NAME: wayland-base-imx8
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${WAYLAND_BASE_IMX8_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base-imx8"]

docker-build-weston-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${WESTON_IMX8_MAJOR}"
    - export MINOR="${WESTON_IMX8_MINOR}"
    - export PATCH="${WESTON_IMX8_PATCH}"
    - ./${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${WESTON_IMX8_FOLDER}/make_feature_map.sh
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: weston-imx8
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${WESTON_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

docker-build-graphics-tests-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${GRAPHICS_TESTS_IMX8_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_IMX8_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: graphics-tests-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${TESTS_IMX8_FOLDER}/${GRAPHICS_TESTS_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

docker-build-weston-touch-calibrator-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_IMX8_MAJOR}"
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: weston-imx8
    IMAGE_NAME: weston-touch-calibrator-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${WESTON_TOUCH_CALIBRATOR_IMX8_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-weston-imx8"]

docker-build-qt5-wayland-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_IMX8_MAJOR}"
    - export MINOR="${QT5_WAYLAND_IMX8_MINOR}"
    - export PATCH="${QT5_WAYLAND_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: qt5-wayland-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${QT5_WAYLAND_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

docker-build-qt5-wayland-imx8-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_IMX8_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_IMX8_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_IMX8_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: qt5-wayland-imx8
    IMAGE_NAME: qt5-wayland-examples-imx8
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${QT5_WAYLAND_EXAMPLES_IMX8_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland-imx8"]

docker-build-qt6-wayland-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_IMX8_MAJOR}"
    - export MINOR="${QT6_WAYLAND_IMX8_MINOR}"
    - export PATCH="${QT6_WAYLAND_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: qt6-wayland-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${QT6_WAYLAND_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

docker-build-qt6-wayland-imx8-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT6_WAYLAND_IMX8_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_EXAMPLES_IMX8_MAJOR}"
    - export MINOR="${QT6_WAYLAND_EXAMPLES_IMX8_MINOR}"
    - export PATCH="${QT6_WAYLAND_EXAMPLES_IMX8_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: qt6-wayland-imx8
    IMAGE_NAME: qt6-wayland-examples-imx8
    QT6_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${QT6_WAYLAND_EXAMPLES_IMX8_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt6-wayland-imx8"]

docker-build-chromium-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${CHROMIUM_IMX8_MAJOR}"
    - export MINOR="${CHROMIUM_IMX8_MINOR}"
    - export PATCH="${CHROMIUM_IMX8_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: chromium-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${CHROMIUM_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

docker-build-cog-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_IMX8_MAJOR}"
    - export MAJOR="${COG_IMX8_MAJOR}"
    - export MINOR="${COG_IMX8_MINOR}"
    - export PATCH="${COG_IMX8_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-imx8
    IMAGE_NAME: cog-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${IMX8_FOLDER}/${COG_IMX8_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-imx8"]

## debian-cross-toolchains

docker-build-armhf-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    BUILD_FOR_AMD64: "true"
    CROSS_COMPILER_TARGET_ARCH: armhf
    CROSS_COMPILE_ARG: arm-linux-gnueabihf
    IMAGE_NAME: debian-cross-toolchain-armhf
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: []

docker-build-armhf-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    BUILD_FOR_AMD64: "true"
    CROSS_COMPILER_TARGET_ARCH: armhf
    BASE_NAME: debian-cross-toolchain-armhf
    IMAGE_NAME: debian-cross-toolchain-ssh-armhf
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-armhf-toolchain"]

docker-build-arm64-toolchain:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    BUILD_FOR_AMD64: "true"
    CROSS_COMPILER_TARGET_ARCH: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_FOLDER}/"
  stage: build-base
  needs: []

docker-build-arm64-toolchain-imx8:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_PATCH}"
  variables:
    BUILD_FOR_AMD64: "true"
    CROSS_COMPILER_TARGET_ARCH: arm64
    CROSS_COMPILE_ARG: aarch64-linux-gnu
    IMAGE_NAME: debian-cross-toolchain-arm64-imx8
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${BASE_IMX8_FOLDER}/"
    ACCEPT_FSL_EULA: 1
  stage: build-base
  needs: []

docker-build-arm64-toolchain-ssh:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export MAJOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}"
    - export MINOR="${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}"
    - export PATCH="${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}"
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
  variables:
    BUILD_FOR_AMD64: "true"
    CROSS_COMPILER_TARGET_ARCH: arm64
    BASE_NAME: debian-cross-toolchain-arm64
    IMAGE_NAME: debian-cross-toolchain-ssh-arm64
    DOCKERFILE_FOLDER: "${DEBIAN_CROSS_TOOLCHAINS_FOLDER}/${SSH_FOLDER}/"
  stage: build-stage1
  needs: [docker-build-arm64-toolchain]

# am62

docker-build-base-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export RELEASE_APPEND="-${DEBIAN_RELEASE}"
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${DEBIAN_MAJOR}"
    - export MINOR="${DEBIAN_MINOR}"
    - export PATCH="${DEBIAN_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    IMAGE_NAME: debian-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${BASE_AM62_FOLDER}/"
  stage: build-base

docker-build-wayland-base-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${WAYLAND_BASE_AM62_MAJOR}"
    - export MINOR="${WAYLAND_BASE_AM62_MINOR}"
    - export PATCH="${WAYLAND_BASE_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: debian-am62
    IMAGE_NAME: wayland-base-am62
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${WAYLAND_BASE_AM62_FOLDER}/"
  stage: build-stage1
  needs: ["docker-build-base-am62"]

docker-build-weston-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${WESTON_AM62_MAJOR}"
    - export MINOR="${WESTON_AM62_MINOR}"
    - export PATCH="${WESTON_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: weston-am62
    ACCEPT_FSL_EULA: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${WESTON_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

docker-build-graphics-tests-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${GRAPHICS_TESTS_AM62_MAJOR}"
    - export MINOR="${GRAPHICS_TESTS_AM62_MINOR}"
    - export PATCH="${GRAPHICS_TESTS_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: graphics-tests-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${TESTS_AM62_FOLDER}/${GRAPHICS_TESTS_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

docker-build-weston-touch-calibrator-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WESTON_AM62_MAJOR}"
    - export MAJOR="${WESTON_TOUCH_CALIBRATOR_MAJOR}"
    - export MINOR="${WESTON_TOUCH_CALIBRATOR_MINOR}"
    - export PATCH="${WESTON_TOUCH_CALIBRATOR_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: weston-am62
    IMAGE_NAME: weston-touch-calibrator-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${WESTON_TOUCH_CALIBRATOR_AM62_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-weston-am62"]

docker-build-qt5-wayland-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_AM62_MAJOR}"
    - export MINOR="${QT5_WAYLAND_AM62_MINOR}"
    - export PATCH="${QT5_WAYLAND_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: qt5-wayland-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${QT5_WAYLAND_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

docker-build-qt5-wayland-am62-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT5_WAYLAND_AM62_MAJOR}"
    - export MAJOR="${QT5_WAYLAND_EXAMPLES_AM62_MAJOR}"
    - export MINOR="${QT5_WAYLAND_EXAMPLES_AM62_MINOR}"
    - export PATCH="${QT5_WAYLAND_EXAMPLES_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: qt5-wayland-am62
    IMAGE_NAME: qt5-wayland-examples-am62
    QT5_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${QT5_WAYLAND_EXAMPLES_AM62_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt5-wayland-am62"]

docker-build-qt6-wayland-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_AM62_MAJOR}"
    - export MINOR="${QT6_WAYLAND_AM62_MINOR}"
    - export PATCH="${QT6_WAYLAND_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: qt6-wayland-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${QT6_WAYLAND_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

docker-build-qt6-wayland-am62-examples:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${QT6_WAYLAND_AM62_MAJOR}"
    - export MAJOR="${QT6_WAYLAND_EXAMPLES_AM62_MAJOR}"
    - export MINOR="${QT6_WAYLAND_EXAMPLES_AM62_MINOR}"
    - export PATCH="${QT6_WAYLAND_EXAMPLES_AM62_PATCH}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: qt6-wayland-am62
    IMAGE_NAME: qt6-wayland-examples-am62
    QT6_EXAMPLES_DEBIAN: 1
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${QT6_WAYLAND_EXAMPLES_AM62_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-qt6-wayland-am62"]

docker-build-chromium-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${CHROMIUM_AM62_MAJOR}"
    - export MINOR="${CHROMIUM_AM62_MINOR}"
    - export PATCH="${CHROMIUM_AM62_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: chromium-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${CHROMIUM_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

docker-build-chromium-tests-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${CHROMIUM_AM62_MAJOR}"
    - export MAJOR="${CHROMIUM_TESTS_AM62_MAJOR}"
    - export MINOR="${CHROMIUM_TESTS_AM62_MINOR}"
    - export PATCH="${CHROMIUM_TESTS_AM62_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: chromium-am62
    IMAGE_NAME: chromium-tests-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${TESTS_AM62_FOLDER}/${CHROMIUM_AM62_TESTS_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-chromium-am62"]

docker-build-cog-am62:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${WAYLAND_BASE_AM62_MAJOR}"
    - export MAJOR="${COG_AM62_MAJOR}"
    - export MINOR="${COG_AM62_MINOR}"
    - export PATCH="${COG_AM62_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BASE_NAME: wayland-base-am62
    IMAGE_NAME: cog-am62
    DOCKERFILE_FOLDER: "${DEBIAN_DOCKER_IMAGES_FOLDER}/${AM62_FOLDER}/${COG_AM62_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-wayland-base-am62"]

## debian-dotnet-development-images

### Dotnet 6

docker-build-dotnet-6:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DOTNET_6_MAJOR}"
    - export MINOR="${DOTNET_6_MINOR}"
    - export PATCH="${DOTNET_6_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: dotnet
    DOTNET_RUNTIME: dotnet
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-base"]

docker-build-aspnet-6:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${ASPDOTNET_6_MAJOR}"
    - export MINOR="${ASPDOTNET_6_MINOR}"
    - export PATCH="${ASPDOTNET_6_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: aspdotnet
    DOTNET_RUNTIME: aspnetcore
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-base"]

docker-build-dotnet-6-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DOTNET_6_RELEASE}"
    - export MAJOR="${DOTNET_6_UNO_MAJOR}"
    - export MINOR="${DOTNET_6_UNO_MINOR}"
    - export PATCH="${DOTNET_6_UNO_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export BASE_TAG_WAYLAND="${DEBIAN_MAJOR}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: dotnet
    BASE_NAME_WAYLAND: wayland-base
    IMAGE_NAME: dotnet-uno
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_BASE_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-6"]

docker-build-dotnet-6-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DOTNET_6_DEBUG_MAJOR}"
    - export MINOR="${DOTNET_6_DEBUG_MINOR}"
    - export PATCH="${DOTNET_6_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: dotnet
    IMAGE_NAME: dotnet-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-6"]

docker-build-aspnet-6-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${ASPDOTNET_6_DEBUG_MAJOR}"
    - export MINOR="${ASPDOTNET_6_DEBUG_MINOR}"
    - export PATCH="${ASPDOTNET_6_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: aspdotnet
    IMAGE_NAME: aspdotnet-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-aspnet-6", "docker-build-dotnet-6-debug"]

docker-build-dotnet-6-uno-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DOTNET_6_UNO_DEBUG_MAJOR}"
    - export MINOR="${DOTNET_6_UNO_DEBUG_MINOR}"
    - export PATCH="${DOTNET_6_UNO_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_6_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_6_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME_DEBUG: dotnet-debug
    BASE_NAME: dotnet-uno
    IMAGE_NAME: dotnet-uno-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_DEBUG_FOLDER}/"
  stage: build-stage4
  needs: ["docker-build-dotnet-6-uno", "docker-build-dotnet-6-debug"]

### Dotnet 8

docker-build-dotnet-8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DOTNET_8_MAJOR}"
    - export MINOR="${DOTNET_8_MINOR}"
    - export PATCH="${DOTNET_8_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: dotnet
    DOTNET_RUNTIME: dotnet
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-base"]

docker-build-aspnet-8:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${ASPDOTNET_8_MAJOR}"
    - export MINOR="${ASPDOTNET_8_MINOR}"
    - export PATCH="${ASPDOTNET_8_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: aspdotnet
    DOTNET_RUNTIME: aspnetcore
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${BASE_FOLDER}/"
  stage: build-stage2
  needs: ["docker-build-base"]

docker-build-dotnet-8-uno:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DOTNET_8_RELEASE}"
    - export MAJOR="${DOTNET_8_UNO_MAJOR}"
    - export MINOR="${DOTNET_8_UNO_MINOR}"
    - export PATCH="${DOTNET_8_UNO_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export BASE_TAG_WAYLAND="${DEBIAN_MAJOR}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: dotnet
    BASE_NAME_WAYLAND: wayland-base
    IMAGE_NAME: dotnet-uno
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_BASE_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-8"]

docker-build-dotnet-8-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${DOTNET_8_DEBUG_MAJOR}"
    - export MINOR="${DOTNET_8_DEBUG_MINOR}"
    - export PATCH="${DOTNET_8_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: dotnet
    IMAGE_NAME: dotnet-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-dotnet-8"]

docker-build-aspnet-8-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}-${DEBIAN_RELEASE}"
    - export MAJOR="${ASPDOTNET_8_DEBUG_MAJOR}"
    - export MINOR="${ASPDOTNET_8_DEBUG_MINOR}"
    - export PATCH="${ASPDOTNET_8_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
    - export DOTNET_DEBUGGER_RELEASE="${DOTNET_DEBUGGER_RELEASE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME: aspdotnet
    IMAGE_NAME: aspdotnet-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${DEBUG_FOLDER}/"
  stage: build-stage3
  needs: ["docker-build-aspnet-8", "docker-build-dotnet-8-debug"]

docker-build-dotnet-8-uno-debug:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_MAJOR}"
    - export MAJOR="${DOTNET_8_UNO_DEBUG_MAJOR}"
    - export MINOR="${DOTNET_8_UNO_DEBUG_MINOR}"
    - export PATCH="${DOTNET_8_UNO_DEBUG_PATCH}"
    - export RELEASE_APPEND="-${DOTNET_8_RELEASE}"
    - export DOTNET_VERSION="${DOTNET_8_SEMANTIC_VERSION}"
    - export DOCKER_NO_CACHE="${DOCKER_NO_CACHE}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    BASE_NAME_DEBUG: dotnet-debug
    BASE_NAME: dotnet-uno
    IMAGE_NAME: dotnet-uno-debug
    DOCKERFILE_FOLDER: "${DEBIAN_DOTNET_DEVELOPMENT_IMAGES_FOLDER}/${UNO_DEBUG_FOLDER}/"
  stage: build-stage4
  needs: ["docker-build-dotnet-8-uno", "docker-build-dotnet-8-debug"]

## rt-validation

docker-build-rt-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${RT_TESTS_MAJOR}"
    - export MINOR="${RT_TESTS_MINOR}"
    - export PATCH="${RT_TESTS_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: rt-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${RT_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base

docker-build-stress-tests:
  retry: 2
  extends: .docker-build
  before_script:
    - export DOCKER_BASE_TAG="${DEBIAN_BASE_IMAGE}"
    - export MAJOR="${STRESS_TESTS_MAJOR}"
    - export MINOR="${STRESS_TESTS_MINOR}"
    - export PATCH="${STRESS_TESTS_PATCH}"
  variables:
    BUILD_FOR_ARM_V8: "true"
    BUILD_FOR_ARM_V7: "true"
    BUILD_FOR_AMD64: "true"
    IMAGE_NAME: stress-tests
    DOCKERFILE_FOLDER: "${RT_VALIDATION_FOLDER}/${STRESS_TESTS_FOLDER}/"
    DOCKER_NO_CACHE: ${DOCKER_NO_CACHE_FEEDS}
  stage: build-base

.shellcheck:
  stage: lint
  image: koalaman/shellcheck-alpine:latest

.shellcheck-git:
  extends: .shellcheck
  before_script:
    - apk update
    - apk add git
  script:
    git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shellcheck

shell-errors:
  extends: .shellcheck-git
# Let's incrementally fix the errors and then disable the allow_failure property for this job.
  allow_failure: true
  variables:
    SHELLCHECK_SEVERITY: 'error'

shell-warnings:
  extends: .shellcheck-git
  allow_failure: true
  variables:
    SHELLCHECK_SEVERITY: 'warning'

shell-format:
  image: mvdan/shfmt:v3.2.0-alpine
  stage: lint
  before_script:
    - apk update
    - apk add git
# Let's incrementally fix the errors and then disable the allow_failure property for this job.
  allow_failure: true
  script:
    - git ls-files --exclude='*.sh' --ignored -c -z | xargs -0r shfmt -i 2 -ci -d

# Make sure to create access token in "Settings/Access Tokens" section with "write_repository" scope selected.
# Then in "Settings/CI/CD/" section add a variable with key "GIT_TOKEN" and a value of the access token. Also mask the variable.
tag:
  stage: chores before building
  before_script:
    - if [ -z ${GIT_TOKEN} ]; then echo "Missing variable GIT_TOKEN." && exit 1; fi
    - TAGS="debian-${DEBIAN_MAJOR}.${DEBIAN_MINOR}.${DEBIAN_PATCH}
            wayland-base-${WAYLAND_BASE_MAJOR}.${WAYLAND_BASE_MINOR}.${WAYLAND_BASE_PATCH}
            weston-${WESTON_MAJOR}.${WESTON_MINOR}.${WESTON_PATCH}
            qt5-wayland-${QT5_WAYLAND_MAJOR}.${QT5_WAYLAND_MINOR}.${QT5_WAYLAND_PATCH}
            qt5-wayland-examples-${QT5_WAYLAND_EXAMPLES_MAJOR}.${QT5_WAYLAND_EXAMPLES_MINOR}.${QT5_WAYLAND_EXAMPLES_PATCH}
            weston-touch-calibrator-${WESTON_TOUCH_CALIBRATOR_MAJOR}.${WESTON_TOUCH_CALIBRATOR_MINOR}.${WESTON_TOUCH_CALIBRATOR_PATCH}
            graphics-tests-${GRAPHICS_TESTS_MAJOR}.${GRAPHICS_TESTS_MINOR}.${GRAPHICS_TESTS_PATCH}
            debian-imx8-${DEBIAN_MAJOR}.${DEBIAN_MINOR}.${DEBIAN_PATCH}
            wayland-base-imx8-${WAYLAND_BASE_IMX8_MAJOR}.${WAYLAND_BASE_IMX8_MINOR}.${WAYLAND_BASE_IMX8_PATCH}
            weston-imx8-${WESTON_IMX8_MAJOR}.${WESTON_IMX8_MINOR}.${WESTON_IMX8_PATCH}
            qt5-wayland-imx8-${QT5_WAYLAND_IMX8_MAJOR}.${QT5_WAYLAND_IMX8_MINOR}.${QT5_WAYLAND_IMX8_PATCH}
            qt5-wayland-examples-imx8-${QT5_WAYLAND_EXAMPLES_IMX8_MAJOR}.${QT5_WAYLAND_EXAMPLES_IMX8_MINOR}.${QT5_WAYLAND_EXAMPLES_IMX8_PATCH}
            graphics-tests-imx8-${GRAPHICS_TESTS_IMX8_MAJOR}.${GRAPHICS_TESTS_IMX8_MINOR}.${GRAPHICS_TESTS_IMX8_PATCH}
            debian-cross-toolchains-${DEBIAN_CROSS_TOOLCHAINS_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_PATCH}
            debian-cross-toolchains-ssh-${DEBIAN_CROSS_TOOLCHAINS_SSH_MAJOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_MINOR}.${DEBIAN_CROSS_TOOLCHAINS_SSH_PATCH}
            dotnet-6-${DOTNET_6_MAJOR}.${DOTNET_6_MINOR}.${DOTNET_6_PATCH}
            dotnet-6-${DOTNET_6_DEBUG_MAJOR}.${DOTNET_6_DEBUG_MINOR}.${DOTNET_6_DEBUG_PATCH}
            dotnet-6-${ASPDOTNET_6_MAJOR}.${ASPDOTNET_6_MINOR}.${ASPDOTNET_6_PATCH}
            dotnet-6-${ASPDOTNET_6_DEBUG_MAJOR}.${ASPDOTNET_6_DEBUG_MINOR}.${ASPDOTNET_6_DEBUG_PATCH}
            dotnet-6-${DOTNET_6_UNO_MAJOR}.${DOTNET_6_UNO_MINOR}.${DOTNET_6_UNO_PATCH}
            dotnet-6-${DOTNET_6_UNO_DEBUG_MAJOR}.${DOTNET_6_UNO_DEBUG_MINOR}.${DOTNET_6_UNO_DEBUG_PATCH}
            dotnet-8-${DOTNET_8_MAJOR}.${DOTNET_8_MINOR}.${DOTNET_8_PATCH}
            dotnet-8-${DOTNET_8_DEBUG_MAJOR}.${DOTNET_8_DEBUG_MINOR}.${DOTNET_8_DEBUG_PATCH}
            dotnet-8-${ASPDOTNET_8_MAJOR}.${ASPDOTNET_8_MINOR}.${ASPDOTNET_8_PATCH}
            dotnet-8-${ASPDOTNET_8_DEBUG_MAJOR}.${ASPDOTNET_8_DEBUG_MINOR}.${ASPDOTNET_8_DEBUG_PATCH}
            dotnet-8-${DOTNET_8_UNO_MAJOR}.${DOTNET_8_UNO_MINOR}.${DOTNET_8_UNO_PATCH}
            dotnet-8-${DOTNET_8_UNO_DEBUG_MAJOR}.${DOTNET_8_UNO_DEBUG_MINOR}.${DOTNET_8_UNO_DEBUG_PATCH}
            rt-tests-${RT_TESTS_MAJOR}.${RT_TESTS_MINOR}.${RT_TESTS_PATCH}
            rt-tests-${STRESS_TESTS_MAJOR}.${STRESS_TESTS_MINOR}.${STRESS_TESTS_PATCH}"
  script:
  - apk update && apk add git
  - git remote set-url origin https://gitlab-ci-token:${GIT_TOKEN}@${CI_REPOSITORY_URL#*@}
  - for TAG in ${TAGS};
      do
        if git ls-remote --tags origin  | grep ${TAG} > /dev/null; then
          echo "${TAG} tag already exists.";
        else
          echo "Tagging repository with ${TAG} tag.";
          git tag --delete ${TAG} > /dev/null 2>&1 || true;
          git tag ${TAG};
          git push -o ci.skip origin ${TAG};
        fi
      done

dotnet-8-tests:
  image: ${TORADEX_INTERNAL_DOCKERHUB_CACHE}/torizon/dotnet:${DOTNET_8_MAJOR}-${DOTNET_8_RELEASE}
  stage: test
  script:
    - dotnet --info
  needs: ["docker-build-dotnet-8"]
